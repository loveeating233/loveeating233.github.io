<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title></title>
    <url>/2023/04/21/axios/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script>]]></content>
  </entry>
  <entry>
    <title>git使用教程</title>
    <url>/2023/03/16/git%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="linux指令"><a href="#linux指令" class="headerlink" title="linux指令"></a>linux指令</h3><ul>
<li><p>clear: 清空屏幕</p>
</li>
<li><p>echo ‘test content’: 往控制台输出信息,你可以理解为console.log。</p>
<p>下面这行指令相当于新建了一个test.txt这个文件，然后里面内容是‘test content’</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">echo &#x27;test content&#x27; &gt; test.txt</span><br></pre></td></tr></table></figure>
</li>
<li><p>ll: 查看当前目录下的子文件，子目录</p>
</li>
<li><p>find [目录名]: 查看指定目录下所有的子孙文件，子孙目录</p>
<p><img src="/./../img/image-20230325105737217.png" alt="image-20230325105737217"></p>
<ul>
<li><p>find [目录名] -type f: 查看当前目录下的所有子孙文件（f就是file的意思）</p>
</li>
<li><p>rm [文件名]: 删除文件</p>
</li>
<li><p>mv [源文件] [重命名文件]: 重命名</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mv test.txt testChanged.txt</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>cat [文件的url]: 查看文件的内容</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat ./testChanged.txt</span><br></pre></td></tr></table></figure>

<p>简写可以不用写 .&#x2F;    直接跟文件名，自动帮你查找当前目录下的testChanged.txt这个文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat testChanged.txt</span><br></pre></td></tr></table></figure>

<ul>
<li>vim [文件的url]<ul>
<li>按 i 进入插入模式，进行文件的编辑</li>
<li>按esc进行命令的执行（可用于退出插入模式）,然后按 :    (冒号)     才能进行命令的执行<ul>
<li>q!      强制退出不保存</li>
<li>wq    保存退出</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="git本地结构"><a href="#git本地结构" class="headerlink" title="git本地结构"></a>git本地结构</h3><p><img src="/./../img/image-20230316231243277.png" alt="image-20230316231243277"></p>
<h3 id="多人协作开发"><a href="#多人协作开发" class="headerlink" title="多人协作开发"></a>多人协作开发</h3><p><img src="/./../img/image-20230316232042296.png" alt="image-20230316232042296"></p>
<p><img src="/./../img/image-20230316232616483.png" alt="image-20230316232616483"></p>
<h3 id="初始化本地库（init）"><a href="#初始化本地库（init）" class="headerlink" title="初始化本地库（init）"></a>初始化本地库（init）</h3><p>git init</p>
<p><img src="/./../img/image-20230316235018493.png" alt="image-20230316235018493"></p>
<blockquote>
<p>.git目录中存放的是本地库相关的子目录和文件，不要删除，也不要胡乱修改</p>
</blockquote>
<h3 id="签名"><a href="#签名" class="headerlink" title="签名"></a>签名</h3><p><img src="/./../img/image-20230320224709543.png" alt="image-20230320224709543"></p>
<p><img src="/./../img/image-20230320225213816.png" alt="image-20230320225213816"></p>
<p><img src="/./../img/image-20230320225429822.png" alt="image-20230320225429822"></p>
<h3 id="git对象"><a href="#git对象" class="headerlink" title="git对象"></a>git对象</h3><h4 id="不懂见这个视频"><a href="#不懂见这个视频" class="headerlink" title="不懂见这个视频"></a>不懂见这个视频</h4><p><img src="/./../img/image-20230325160713032.png" alt="image-20230325160713032"></p>
<h4 id="简单提一下"><a href="#简单提一下" class="headerlink" title="简单提一下"></a>简单提一下</h4><p>就是你往git里面存东西(文件)，是以键值对的形式存在的。键就是git给你的hash，值就是你存的内容。然后你的数据是存放在objects文件夹里的，这个键值对的数据类型是一个bolb类型。这个键值对，就是一个git对象</p>
<p><img src="/./../img/image-20230325160641080.png" alt="image-20230325160641080"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git hash-object -w ./test1.txt</span><br></pre></td></tr></table></figure>



<p>你执行 git hash-object -w 文件路径的时候  它会给一个warning，不是错误，不理它</p>
<p><img src="/./../img/image-20230325165121961.png" alt="image-20230325165121961"></p>
<p>如果你修改了test1.txt文件里面的内容，你还需要再git hash-object -w .&#x2F;test1.txt一下，才能有对应的hash</p>
<p>你git的数据，全部存储在这个文件夹里</p>
<p><img src="/./../img/image-20230325160836416.png" alt="image-20230325160836416"></p>
<p><img src="/./../img/image-20230325161035526.png" alt="image-20230325161035526"></p>
<h5 id="根据键值读取数据"><a href="#根据键值读取数据" class="headerlink" title="根据键值读取数据"></a>根据键值读取数据</h5><p><img src="/./../img/image-20230325163628866.png" alt="image-20230325163628866"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git cat-file -p 1a7f6dd27d3c5b3832701836b83c6f2f710b2b13</span><br></pre></td></tr></table></figure>

<blockquote>
<p>去本地库目录下执行这条命令</p>
</blockquote>
<h5 id="git对象存在的问题"><a href="#git对象存在的问题" class="headerlink" title="git对象存在的问题"></a>git对象存在的问题</h5><p><img src="/./../img/image-20230325172818178.png" alt="image-20230325172818178"></p>
<h3 id="树对象"><a href="#树对象" class="headerlink" title="树对象"></a>树对象</h3><p>详细见</p>
<p>这里我先简单提一下</p>
<p>这个树对象就是目录，你上面用git hash-object -w .&#x2F;test1.txt生成一个git对象后，是在本地库生成的，不涉及暂存区，而且那个对象键是hash，值是文件内容，没有文件名</p>
<p>这个树对象会涉及目录，文件名，还有暂存区</p>
<p>我们一步一步来</p>
<p>你先在工作区生成一个文件，目前这个文件仅涉及工作区，不涉及什么暂存区，本地库</p>
<p><img src="/./../img/image-20230328173508901.png" alt="image-20230328173508901"></p>
<p>在本地库生成一个git对象</p>
<p><img src="/./../img/image-20230328174819953.png" alt="image-20230328174819953"></p>
<p>拿到上面生成的git对象的hash，下面这条命令是将这个文件放入暂存区，并给这个文件起个名字</p>
<p><img src="/./../img/image-20230328181457666.png" alt="image-20230328181457666"></p>
<p><img src="/./../img/image-20230328181658240.png" alt="image-20230328181658240"></p>
<p>write-tree</p>
<p>执行完这个命令自动把这个树对象提交到本地库中</p>
<p><img src="/./../img/image-20230328181900006.png" alt="image-20230328181900006"></p>
<h3 id="文件的四种状态"><a href="#文件的四种状态" class="headerlink" title="文件的四种状态"></a>文件的四种状态</h3><ul>
<li>Untracked: 未跟踪, 此文件在文件夹中, 但并没有加入到git库, 不参与版本控制. 通过git add 状态变为Staged.</li>
<li>Unmodify: 文件已经入库, 未修改, 即版本库中的文件快照内容与文件夹中完全一致. 这种类型的文件有两种去处, 如果它被修改, 而变为Modified. 如果使用git rm移出版本库, 则成为Untracked文件</li>
<li>Modified: 文件已修改, 仅仅是修改, 并没有进行其他的操作. 这个文件也有两个去处, 通过git add可进入暂存staged状态, 使用git checkout 则丢弃修改过, 返回到unmodify状态, 这个git checkout即从库中取出文件, 覆盖当前修改 !</li>
<li>Staged: 暂存状态. 执行git commit则将修改同步到库中, 这时库中的文件和本地文件又变为一致, 文件为Unmodify状态. 执行git reset HEAD filename取消暂存, 文件状态为Modified</li>
</ul>
<h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><p><img src="/./../img/image-20230321123952697.png" alt="image-20230321123952697"></p>
<h3 id="git-status"><a href="#git-status" class="headerlink" title="git status"></a>git status</h3><p>查看文件状态</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git status</span><br></pre></td></tr></table></figure>



<h3 id="git-add"><a href="#git-add" class="headerlink" title="git add"></a>git add</h3><p>将untracked的文件提交到暂存区</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git add helloWorld.txt</span><br></pre></td></tr></table></figure>



<p><img src="/./../img/image-20230320232428729.png" alt="image-20230320232428729"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git rm --cached helloWorld.txt</span><br></pre></td></tr></table></figure>

<h3 id="git-commit"><a href="#git-commit" class="headerlink" title="git commit"></a>git commit</h3><p>将暂存区的文件提交到本地库</p>
<p>-m  后面写的是你提交文件的信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git commit -m &quot;in order to practice &quot;</span><br></pre></td></tr></table></figure>

<h3 id="modified状态"><a href="#modified状态" class="headerlink" title="modified状态"></a>modified状态</h3><p><img src="/./../img/image-20230321125050527.png" alt="image-20230321125050527"></p>
<p>意思就是 你可以add提交到暂存区，也可以直接commit</p>
<h3 id="忽略文件"><a href="#忽略文件" class="headerlink" title="忽略文件"></a>忽略文件</h3><p>有些时候我们不想把某些文件纳入版本控制中，比如数据库文件，临时文件，设计文件等</p>
<p>在主目录下建立”.gitignore”文件，此文件有如下规则：</p>
<ol>
<li>忽略文件中的空行或以井号（#）开始的行将会被忽略。</li>
<li>可以使用Linux通配符。例如：星号（*）代表任意多个字符，问号（？）代表一个字符，方括号（[abc]）代表可选字符范围，大括号（{string1,string2,…}）代表可选的字符串等。</li>
<li>如果名称的最前面有一个感叹号（!），表示例外规则，将不被忽略。</li>
<li>如果名称的最前面是一个路径分隔符（&#x2F;），表示要忽略的文件在此目录下，而子目录中的文件不忽略。</li>
<li>如果名称的最后面是一个路径分隔符（&#x2F;），表示要忽略的是此目录下该名称的子目录，而非文件（默认文件或目录都忽略）。</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">#为注释</span><br><span class="line">*.txt        #忽略所有 .txt结尾的文件,这样的话上传就不会被选中！</span><br><span class="line">!lib.txt     #但lib.txt除外</span><br><span class="line">/temp        #仅忽略项目根目录下的TODO文件,不包括其它目录temp</span><br><span class="line">build/       #忽略build/目录下的所有文件</span><br><span class="line">doc/*.txt    #会忽略 doc/notes.txt 但不包括 doc/server/arch.txt</span><br></pre></td></tr></table></figure>

<h3 id="git-log-打印日志（历史记录）"><a href="#git-log-打印日志（历史记录）" class="headerlink" title="git log 打印日志（历史记录）"></a>git log 打印日志（历史记录）</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git log</span><br></pre></td></tr></table></figure>



<p><img src="/./../img/image-20230321130539271.png" alt="image-20230321130539271"></p>
<h4 id=""><a href="#" class="headerlink" title="."></a>.</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git log --pretty=oneline</span><br></pre></td></tr></table></figure>

<p>比git log简介一些</p>
<p><img src="/./../img/image-20230321130717321.png" alt="image-20230321130717321"></p>
<hr></hr>



<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git reflog</span><br></pre></td></tr></table></figure>

<p><img src="/./../img/image-20230321131206608.png" alt="image-20230321131206608"></p>
<h3 id="版本的前进与后退"><a href="#版本的前进与后退" class="headerlink" title="版本的前进与后退"></a>版本的前进与后退</h3><p><img src="/./../img/image-20230322182152723.png" alt="image-20230322182152723"></p>
<h4 id="通过索引值【推荐】"><a href="#通过索引值【推荐】" class="headerlink" title="通过索引值【推荐】"></a>通过索引值【推荐】</h4><p>head是个指针  我们就是通过这个head来进行版本的前进与后退</p>
<p>git reset –hard [索引值]</p>
<p><img src="/./../img/image-20230322181324393.png" alt="image-20230322181324393"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git reset --hard 85e9180</span><br></pre></td></tr></table></figure>



<h4 id="通过符号"><a href="#通过符号" class="headerlink" title="通过符号"></a>通过符号</h4><h5 id="后退"><a href="#后退" class="headerlink" title="后退"></a>后退</h5><h6 id="通过异或符号"><a href="#通过异或符号" class="headerlink" title="通过异或符号"></a>通过异或符号</h6><p><img src="/./../img/image-20230322181644345.png" alt="image-20230322181644345"></p>
<p>但是如果要退十几个版本，总不可能写十几个异或符号吧，所以有更简便的方法</p>
<h6 id="波浪符号"><a href="#波浪符号" class="headerlink" title="波浪符号"></a>波浪符号</h6><p><img src="/./../img/image-20230322181950418.png" alt="image-20230322181950418"></p>
<h3 id="reset-三个参数"><a href="#reset-三个参数" class="headerlink" title="reset 三个参数"></a>reset 三个参数</h3><p><img src="/./../img/image-20230322182653203.png" alt="image-20230322182653203"></p>
<h3 id="比较文件差异"><a href="#比较文件差异" class="headerlink" title="比较文件差异"></a>比较文件差异</h3><p>git diff</p>
<p><img src="/./../img/image-20230324232815400.png" alt="image-20230324232815400"></p>
<p>不指定文件名，相当于拿工作区中所有的文件进行比较</p>
<h3 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h3><h4 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h4><p><img src="/./../img/image-20230324233645904.png" alt="image-20230324233645904"></p>
<p>hot_fix:热修复</p>
<h4 id="分支操作"><a href="#分支操作" class="headerlink" title="分支操作"></a>分支操作</h4><h5 id="查看分支"><a href="#查看分支" class="headerlink" title="查看分支"></a>查看分支</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git branch -v</span><br></pre></td></tr></table></figure>



<p>可以看到我当前只有一个主分支</p>
<p><img src="/./../img/image-20230325100640360.png" alt="image-20230325100640360"></p>
<h5 id="生成一个新的分支"><a href="#生成一个新的分支" class="headerlink" title="生成一个新的分支"></a>生成一个新的分支</h5><p>这里我生成了一个hot_fix的分支</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git branch hot_fix</span><br></pre></td></tr></table></figure>

<p><img src="/./../img/image-20230325101106802.png" alt="image-20230325101106802"></p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2023/03/24/babel/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="邂逅babel"><a href="#邂逅babel" class="headerlink" title="邂逅babel"></a>邂逅babel</h3><p>babel刚开始就是用来将一些es6的js代码转化为es5，因为有些老的浏览器不识别es6的js语法的。到了后来功能也就越来越强大了</p>
<h3 id="bale的安装"><a href="#bale的安装" class="headerlink" title="bale的安装"></a>bale的安装</h3><p><img src="/./../img/image-20230324162943896.png" alt="image-20230324162943896"></p>
<h3 id="babel-初体验"><a href="#babel-初体验" class="headerlink" title="babel 初体验"></a>babel 初体验</h3><p>我们需要把这个test.js的文件打包放到dist文件夹中</p>
<p><img src="/./../img/image-20230324170116211.png" alt="image-20230324170116211"></p>
<p>首先 我们需要下一个（插件）预设，这个预设里面集成了很多插件</p>
<p><img src="/./../img/image-20230324170205978.png" alt="image-20230324170205978"></p>
<center>为什么要使用插件预设</center>

<blockquote>
<p>你光下一个babel是打包不了的，还要借助各种各样的插件才可以打包</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install @babel/preset-env -D</span><br></pre></td></tr></table></figure>

<p>开始打包文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npx babel ./js/test.js --out-dir dist --presets=@babel/preset-env</span><br></pre></td></tr></table></figure>

<p>这行命令的解释</p>
<ul>
<li>.&#x2F;js&#x2F;test.js:   源文件目录</li>
<li>–out-dir dist:   打包后要放入哪个文件夹</li>
<li>--presets&#x3D;@babel&#x2F;preset-env:   用的预设，可以有多个预设，每个预设之间用（？其实我现在也不知道多个预设之间用什么隔开）</li>
</ul>
<p>你也可以这么写</p>
]]></content>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2023/03/05/hello-world/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2023/03/23/nodejs/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="nodejs编码注意事项"><a href="#nodejs编码注意事项" class="headerlink" title="nodejs编码注意事项"></a>nodejs编码注意事项</h3><p><img src="/./../img/image-20230323212031408.png" alt="image-20230323212031408"></p>
<h3 id="buffer"><a href="#buffer" class="headerlink" title="buffer"></a>buffer</h3><h4 id="概念，特点"><a href="#概念，特点" class="headerlink" title="概念，特点"></a>概念，特点</h4><p><img src="/./../img/image-20230323212439481.png" alt="image-20230323212439481"></p>
<h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><p><img src="/./../img/image-20230323213057049.png" alt="image-20230323213057049"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let buf = Buffer.alloc(10)</span><br><span class="line">console.log(buf);</span><br><span class="line"></span><br><span class="line">let buf_2 = Buffer.allocUnsafe(10)</span><br><span class="line">console.log(buf_2)</span><br><span class="line"></span><br><span class="line">let buf_3 = Buffer.from(&#x27;hello&#x27;)</span><br><span class="line">console.log(buf_3);</span><br><span class="line"></span><br><span class="line">let buf_4 = Buffer.from([1,2,3,4,5])</span><br><span class="line">console.log(buf_4);</span><br></pre></td></tr></table></figure>

<h4 id="buffer与字符串的转换"><a href="#buffer与字符串的转换" class="headerlink" title="buffer与字符串的转换"></a>buffer与字符串的转换</h4><p><img src="/./../img/image-20230323231555523.png" alt="image-20230323231555523"></p>
<p>输出结果</p>
<p><img src="/./../img/image-20230323231622231.png" alt="image-20230323231622231"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let buf = Buffer.from([100,200,333,443])</span><br><span class="line">console.log(buf.toString());</span><br></pre></td></tr></table></figure>

<h4 id="buffer的读写"><a href="#buffer的读写" class="headerlink" title="buffer的读写"></a>buffer的读写</h4><p><img src="/./../img/image-20230324094438763.png" alt="image-20230324094438763"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let buf=Buffer.from(&#x27;hello&#x27;)</span><br><span class="line">buf[0]=103</span><br><span class="line">console.log(buf.toString()); // gello</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="进程与线程"><a href="#进程与线程" class="headerlink" title="进程与线程"></a>进程与线程</h3><p>去见视频，几分钟就懂了</p>
<p><img src="/./../img/image-20230324095929738.png" alt="image-20230324095929738"></p>
<p><img src="/./../img/image-20230324100046344.png" alt="image-20230324100046344"></p>
<p>你自己运行这个pslist不好使，因为你没有配置什么环境变量或者下载什么程序（知道线程和进程是个什么东西就好）</p>
<h3 id="fs模块"><a href="#fs模块" class="headerlink" title="fs模块"></a>fs模块</h3><h4 id="文件的写入"><a href="#文件的写入" class="headerlink" title="文件的写入"></a>文件的写入</h4><h5 id="writeFile异步写入"><a href="#writeFile异步写入" class="headerlink" title="writeFile异步写入"></a>writeFile异步写入</h5><p><img src="/./../img/image-20230324101306808.png" alt="image-20230324101306808"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 引入nodejs模块</span><br><span class="line">const fs = require(&#x27;fs&#x27;)</span><br><span class="line">// 写入文件</span><br><span class="line">fs.writeFile(&#x27;./test.txt&#x27;,&#x27;文件写入啦啦啦&#x27;,err=&gt;&#123;</span><br><span class="line">    // 文件写入后就会执行这个回调函数 同时传入一个错误对象</span><br><span class="line">    // 写入成功 err：null    写入失败 err:一个错误对象</span><br><span class="line">    if(err)&#123;</span><br><span class="line">        console.log(&#x27;写入失败&#x27;)</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        console.log(&#x27;写入成功&#x27;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p><img src="/./../img/image-20230324104938912.png" alt="image-20230324104938912"></p>
<h5 id="writeFileSync同步写入"><a href="#writeFileSync同步写入" class="headerlink" title="writeFileSync同步写入"></a>writeFileSync同步写入</h5><p><img src="/./../img/image-20230324105334501.png" alt="image-20230324105334501"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">fs.writeFileSync(&#x27;./test1.txt&#x27;,&#x27;我是同步写入的内容&#x27;)</span><br></pre></td></tr></table></figure>

<h5 id="appendFile追加写入"><a href="#appendFile追加写入" class="headerlink" title="appendFile追加写入"></a>appendFile追加写入</h5><p><img src="/./../img/image-20230324105925614.png" alt="image-20230324105925614"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 引入nodejs模块</span><br><span class="line">const fs = require(&#x27;fs&#x27;)</span><br><span class="line">fs.appendFile(&#x27;./test.txt&#x27;,&#x27;我是追加写入的内容&#x27;,err=&gt;&#123;</span><br><span class="line">    if(err)&#123;</span><br><span class="line">        console.log(&#x27;追加写入失败&#x27;);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        console.log(&#x27;追加写入成功&#x27;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h5 id="writeFile实现追加写入"><a href="#writeFile实现追加写入" class="headerlink" title="writeFile实现追加写入"></a>writeFile实现追加写入</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// writeFile实现追加写入</span><br><span class="line">fs.writeFile(&#x27;./test1.txt&#x27;,&#x27;love love love&#x27;,&#123;flag:&#x27;a&#x27;&#125;,(err)=&gt;&#123;</span><br><span class="line">    if(err)&#123;</span><br><span class="line">        console.log(&#x27;写入失败&#x27;);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        console.log(&#x27;写入成功&#x27;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;) </span><br></pre></td></tr></table></figure>

<blockquote>
<p> 如果没有 flag:’a’的话，则会覆盖</p>
</blockquote>
<h5 id="文件的流式写入"><a href="#文件的流式写入" class="headerlink" title="文件的流式写入"></a>文件的流式写入</h5><p><img src="/./../img/image-20230324111136334.png" alt="image-20230324111136334"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 引入nodejs模块</span><br><span class="line">const fs = require(&#x27;fs&#x27;)</span><br><span class="line">// 创建写入流对象</span><br><span class="line">let ws = fs.createWriteStream(&#x27;./test2.txt&#x27;)</span><br><span class="line">// 写入</span><br><span class="line">ws.write(&#x27;床前明月光\r\n&#x27;)</span><br><span class="line">ws.write(&#x27;疑是地上霜\r\n&#x27;)</span><br><span class="line">ws.write(&#x27;举头望明月\r\n&#x27;)</span><br><span class="line">ws.write(&#x27;低头思故乡&#x27;)</span><br><span class="line">// 关闭写入通道</span><br><span class="line">ws.close()</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h5 id="文件写入的场景"><a href="#文件写入的场景" class="headerlink" title="文件写入的场景"></a>文件写入的场景</h5><p><img src="/./../img/image-20230324111531996.png" alt="image-20230324111531996"></p>
<h4 id="文件的读取"><a href="#文件的读取" class="headerlink" title="文件的读取"></a>文件的读取</h4><h5 id="异步读取"><a href="#异步读取" class="headerlink" title="异步读取"></a>异步读取</h5><p><img src="/./../img/image-20230325183959341.png" alt="image-20230325183959341"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 引入nodejs模块</span><br><span class="line">const fs = require(&#x27;fs&#x27;)</span><br><span class="line">fs.readFile(&#x27;./test2.txt&#x27;,(err,data)=&gt;&#123;</span><br><span class="line">    // err错误对象   data：要读取的内容 不过是以buffer的形式</span><br><span class="line">    if(err)&#123;</span><br><span class="line">        console.log(&#x27;文件读取失败&#x27;);</span><br><span class="line">    &#125; else&#123;</span><br><span class="line">        console.log(data.toString())</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h5 id="同步读取"><a href="#同步读取" class="headerlink" title="同步读取"></a>同步读取</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">onst fs = require(&#x27;fs&#x27;)</span><br><span class="line">let data=fs.readFileSync(&#x27;./test2.txt&#x27;)</span><br><span class="line">console.log(data.toString());</span><br></pre></td></tr></table></figure>

<h5 id="流式读取"><a href="#流式读取" class="headerlink" title="流式读取"></a>流式读取</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 引入nodejs模块</span><br><span class="line">const fs = require(&#x27;fs&#x27;)</span><br><span class="line">// 流式读取</span><br><span class="line">// 创建读取流对象</span><br><span class="line">let rs = fs.createReadStream(&#x27;./careofyou.mp3&#x27;)</span><br><span class="line">// 绑定data事件</span><br><span class="line">rs.on(&#x27;data&#x27;,chunk =&gt; &#123;</span><br><span class="line">    // chunk 块儿 （这个流式读取大文件是一块一块读取的）</span><br><span class="line">    console.log(chunk);</span><br><span class="line">&#125;)</span><br><span class="line">// end 可选事件</span><br><span class="line">rs.on(&#x27;end&#x27;,()=&gt;&#123;</span><br><span class="line">    console.log(&#x27;读取完成&#x27;);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="小案例-复制文件"><a href="#小案例-复制文件" class="headerlink" title="小案例 复制文件"></a>小案例 复制文件</h4><p>方式一 正常读取写入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 引入fs模块</span><br><span class="line">let fs = require(&#x27;fs&#x27;)</span><br><span class="line">// 读取文件</span><br><span class="line">let data = fs.readFileSync(&#x27;./careofyou.mp3&#x27;)</span><br><span class="line">// 写入文件</span><br><span class="line">fs.writeFileSync(&#x27;./music.mp3&#x27;,data)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>方式二  流式读取写入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 引入fs模块</span><br><span class="line">let fs = require(&#x27;fs&#x27;)</span><br><span class="line">// 创建读取流对象</span><br><span class="line">let rs = fs.createReadStream(&#x27;./music.mp3&#x27;)</span><br><span class="line">// 创建写入流对象</span><br><span class="line">let ws= fs.createWriteStream(&#x27;./music1.mp3&#x27;)</span><br><span class="line">rs.on(&#x27;data&#x27;,(chunk)=&gt;&#123;</span><br><span class="line">ws.write(chunk)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>第二种方式性能会好一些，所耗资源空间比第一种少</p>
</blockquote>
<h4 id="文件的重命名"><a href="#文件的重命名" class="headerlink" title="文件的重命名"></a>文件的重命名</h4><p>调用rename方法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 引入fs模块</span><br><span class="line">let fs = require(&#x27;fs&#x27;)</span><br><span class="line">// 文件重命名 调用fs的rename方法 第一个参数是你要重命名的文件 第二个参数是你重命名之后的文件</span><br><span class="line">fs.rename(&#x27;./test1.txt&#x27;,&#x27;./test3.txt&#x27;,err=&gt;&#123;</span><br><span class="line">    if(err)&#123;</span><br><span class="line">        console.log(&#x27;文件重命名失败&#x27;);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        console.log(&#x27;文件重命名成功&#x27;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="文件的移动"><a href="#文件的移动" class="headerlink" title="文件的移动"></a>文件的移动</h4><p>也是调用rename方法，三个参数作用也差不多</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 引入fs模块</span><br><span class="line">let fs = require(&#x27;fs&#x27;)</span><br><span class="line">fs.rename(&#x27;./test3.txt&#x27;,&#x27;./资料/test3.txt&#x27;,err=&gt;&#123;</span><br><span class="line">    if(err)&#123;</span><br><span class="line">        console.log(&#x27;文件移动失败&#x27;);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        console.log(&#x27;文件移动成功&#x27;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="文件的删除"><a href="#文件的删除" class="headerlink" title="文件的删除"></a>文件的删除</h4><p><img src="/./../img/image-20230325214248181.png" alt="image-20230325214248181"></p>
<p>两种方法都行</p>
<h4 id="文件夹的操作"><a href="#文件夹的操作" class="headerlink" title="文件夹的操作"></a>文件夹的操作</h4><h5 id="创建文件夹"><a href="#创建文件夹" class="headerlink" title="创建文件夹"></a>创建文件夹</h5><p><img src="/./../img/image-20230325214608445.png" alt="image-20230325214608445"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 引入fs模块</span><br><span class="line">let fs = require(&#x27;fs&#x27;)</span><br><span class="line">fs.mkdir(&#x27;./测试&#x27;,err=&gt;&#123;</span><br><span class="line">    if(err)&#123;</span><br><span class="line">        console.log(&#x27;失败&#x27;);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        console.log(&#x27;success&#x27;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h5 id="文件夹递归创建"><a href="#文件夹递归创建" class="headerlink" title="文件夹递归创建"></a>文件夹递归创建</h5><p>recursive:递归的意思</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 引入fs模块</span><br><span class="line">let fs = require(&#x27;fs&#x27;)</span><br><span class="line">fs.mkdir(&#x27;./a/b/c&#x27;,&#123;recursive:true&#125;,err=&gt;&#123;</span><br><span class="line">    if(err)&#123;</span><br><span class="line">        console.log(&#x27;失败&#x27;);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        console.log(&#x27;success&#x27;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h5 id="读取文件夹"><a href="#读取文件夹" class="headerlink" title="读取文件夹"></a>读取文件夹</h5><p><img src="/./../img/image-20230325222735337.png" alt="image-20230325222735337"></p>
<h5 id="删除文件夹"><a href="#删除文件夹" class="headerlink" title="删除文件夹"></a>删除文件夹</h5><h6 id="rmdir-（这个方法比较鸡肋）"><a href="#rmdir-（这个方法比较鸡肋）" class="headerlink" title="rmdir　　　　　（这个方法比较鸡肋）"></a>rmdir　　　　　（这个方法比较鸡肋）</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 引入fs模块</span><br><span class="line">let fs = require(&#x27;fs&#x27;)</span><br><span class="line">fs.rmdir(&#x27;./测试&#x27;,err=&gt;&#123;</span><br><span class="line">    if(err)&#123;</span><br><span class="line">        console.log(&#x27;失败&#x27;,err);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        console.log(&#x27;success&#x27;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>　注意，需要目录为空，才能使用ｒｍｄｉｒ删除这个文件夹</p>
</blockquote>
<h6 id="rm"><a href="#rm" class="headerlink" title="rm"></a>rm</h6><p>可以把这个文件夹全部删掉（就是里面的所有文件全部删掉）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 引入fs模块</span><br><span class="line">let fs = require(&#x27;fs&#x27;)</span><br><span class="line">fs.rm(&#x27;./a&#x27;,&#123;recursive:true&#125;,err=&gt;&#123;</span><br><span class="line">    if(err)&#123;</span><br><span class="line">        console.log(&#x27;失败&#x27;,err);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        console.log(&#x27;success&#x27;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="相对路径的bug"><a href="#相对路径的bug" class="headerlink" title="相对路径的bug"></a>相对路径的bug</h4><h5 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h5><p>也不能说是bug，可以说是一个小坑</p>
<p><img src="/./../img/image-20230325231835610.png" alt="image-20230325231835610"></p>
<h5 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h5><p>平时多注意一下就好</p>
<p>你如果嫌用相对路径容易出错的话，你也可以用绝对路径</p>
<p><img src="/./../img/image-20230325232107601.png" alt="image-20230325232107601"></p>
<h4 id="小案例-批量重命名"><a href="#小案例-批量重命名" class="headerlink" title="小案例 批量重命名"></a>小案例 批量重命名</h4><p>需求：把1~9 的文件前面加个0（变成01 02 …..09）</p>
<p><img src="/./../img/image-20230326200818269.png" alt="image-20230326200818269"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 引入fs模块</span><br><span class="line">let fs = require(&#x27;fs&#x27;)</span><br><span class="line">// 读取文件夹</span><br><span class="line">let files = fs.readdirSync(&#x27;./资料&#x27;)</span><br><span class="line">// 对文件夹里面的文件进行遍历操作</span><br><span class="line">files.forEach(file=&gt;&#123;</span><br><span class="line">    // 解构赋值</span><br><span class="line">    let [num,name] = file.split(&#x27;-&#x27;)</span><br><span class="line">    // 这个num是个字符串 你需要用强制转换将ta变为数字</span><br><span class="line">    if(Number(num) &lt;10)&#123;</span><br><span class="line">        num=&#x27;0&#x27;+num</span><br><span class="line">    &#125;</span><br><span class="line">    let newPath = num +&#x27;-&#x27;+ name</span><br><span class="line">    // 对文件进行重命名</span><br><span class="line">    fs.renameSync(`./资料/$&#123;file&#125;`,`./资料/$&#123;newPath&#125;`)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>我这里出现了个小bug 目前不知道什么原因，就是，为什么我执行完这个脚本后文件后缀名丢了</p>
</blockquote>
<p><img src="/./../img/image-20230326201314008.png" alt="image-20230326201314008"></p>
<p>以后有空解决吧</p>
<h3 id="path模块"><a href="#path模块" class="headerlink" title="path模块"></a>path模块</h3><h4 id="常用API"><a href="#常用API" class="headerlink" title="常用API"></a>常用API</h4><p><img src="/./../img/image-20230326202149244.png" alt="image-20230326202149244"></p>
<h5 id="resolve方法"><a href="#resolve方法" class="headerlink" title="resolve方法"></a>resolve方法</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 引入path模块</span><br><span class="line">let path = require(&#x27;path&#x27;)</span><br><span class="line">// 它会通过计算   计算出第二个参数那个文件所在的绝对路径  （第二个参数必须是个相对路径)</span><br><span class="line">let filepath = path.resolve(__dirname,&#x27;./test.txt&#x27;)</span><br><span class="line">console.log(filepath);</span><br></pre></td></tr></table></figure>



<p>其他方法不怎么常用，了解即可</p>
<p>sep：字面意思理解</p>
<p>parse：看下面自己体会</p>
<p><img src="/./../img/image-20230326202946303.png" alt="image-20230326202946303"></p>
<p>basename  获取文件名</p>
<p>其他的api很好理解吧 </p>
<h3 id="http协议"><a href="#http协议" class="headerlink" title="http协议"></a>http协议</h3><p>就是用来约束浏览器与服务器之间传输数据的一种协议</p>
<p><img src="/./../img/image-20230326203619353.png" alt="image-20230326203619353"></p>
<h4 id="请求报文"><a href="#请求报文" class="headerlink" title="请求报文"></a>请求报文</h4><p><img src="/./../img/image-20230326204342274.png" alt="image-20230326204342274"></p>
<h5 id="请求行"><a href="#请求行" class="headerlink" title="请求行"></a>请求行</h5><p><img src="/./../img/image-20230327101039688.png" alt="image-20230327101039688"></p>
<p><img src="/./../img/image-20230327101123597.png" alt="image-20230327101123597"></p>
<h6 id="url"><a href="#url" class="headerlink" title="url"></a>url</h6><p><img src="/./../img/image-20230327101310422.png" alt="image-20230327101310422"></p>
<h5 id="请求头"><a href="#请求头" class="headerlink" title="请求头"></a>请求头</h5><p>由一个个键值对构成，里面记录着浏览器的相关信息，例如可接受的文件类型，浏览器型号等等</p>
<p><img src="/./../img/image-20230327101632475.png" alt="image-20230327101632475"></p>
<p>请求头详细信息见</p>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers">MDN-HTTP 标头（header)</a></p>
<h5 id="请求体"><a href="#请求体" class="headerlink" title="请求体"></a>请求体</h5><p>请求体的内容非常灵活，你可以设置任何内容</p>
<h4 id="响应报文"><a href="#响应报文" class="headerlink" title="响应报文"></a>响应报文</h4><p><img src="/./../img/image-20230327102942831.png" alt="image-20230327102942831"></p>
<p>响应行</p>
<p><img src="/./../img/image-20230327103033185.png" alt="image-20230327103033185"></p>
<h5 id="状态码"><a href="#状态码" class="headerlink" title="状态码"></a>状态码</h5><p><img src="/./../img/image-20230327103120429.png" alt="image-20230327103120429"></p>
<p><img src="/./../img/image-20230327103158803.png" alt="image-20230327103158803"></p>
<p>详细见</p>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status#%E6%88%90%E5%8A%9F%E5%93%8D%E5%BA%94">MDN-http状态码</a></p>
<p>按ctrl-f进行搜索</p>
<p><img src="/./../img/image-20230327103828870.png" alt="image-20230327103828870"></p>
<p><img src="/./../img/image-20230327103909631.png" alt="image-20230327103909631"></p>
<p>响应头详细信息参考</p>
<p><a href="https://space.bilibili.com/296788528?spm_id_from=333.788.b_765f7570696e666f.1">MDN-http-head</a></p>
<p><img src="/./../img/image-20230327104437816.png" alt="image-20230327104437816"></p>
<blockquote>
<p> ctrl+f搜索你想知道的响应头，如果搜不出来，可能是服务端自定义的响应头，mdn文档里没有</p>
</blockquote>
<h5 id="设置响应体"><a href="#设置响应体" class="headerlink" title="设置响应体"></a>设置响应体</h5><p><img src="/./../img/image-20230327104456023.png" alt="image-20230327104456023"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">res.write(&#x27;&#x27;)</span><br></pre></td></tr></table></figure>

<p><img src="/./../img/image-20230330100142342.png" alt="image-20230330100142342"></p>
<p>write方法是可以多次调用的</p>
<p><img src="/./../img/image-20230330100255744.png" alt="image-20230330100255744"></p>
<h5 id="设置多个同名的响应头"><a href="#设置多个同名的响应头" class="headerlink" title="设置多个同名的响应头"></a>设置多个同名的响应头</h5><p><img src="/./../img/image-20230330095905835.png" alt="image-20230330095905835"></p>
<h4 id="ip地址"><a href="#ip地址" class="headerlink" title="ip地址"></a>ip地址</h4><p>目前在局域网里，各个设备发消息是可以的，但是你想要跟远在北京的小伙伴开黑通视频是不行滴</p>
<p><img src="/./../img/image-20230328102757101.png" alt="image-20230328102757101"></p>
<p>这时你需要跟互联网公司拉网线，也就是使你这个路由器有个公网ip，有了这个公网ip，我们就可以跟外地的小伙伴进行通信开黑</p>
<p><img src="/./../img/image-20230328103103596.png" alt="image-20230328103103596"></p>
<h4 id="端口"><a href="#端口" class="headerlink" title="端口"></a>端口</h4><p><img src="/./../img/image-20230328103417716.png" alt="image-20230328103417716"></p>
<p>端口的主要作用：实现不同主机应用程序之间的通信</p>
<p>http默认端口是80</p>
<p>https的默认端口是 443</p>
<p><img src="/./../img/image-20230328103637940.png" alt="image-20230328103637940"></p>
<h4 id="资源监视器监听端口"><a href="#资源监视器监听端口" class="headerlink" title="资源监视器监听端口"></a>资源监视器监听端口</h4><p>通过这个资源监视器我们就可以知道我们的端口是被哪些应用程序占用了</p>
<p><img src="/./../img/image-20230328112524264.png" alt="image-20230328112524264"></p>
<p>通过端口找到这个程序的PID</p>
<p><img src="/./../img/image-20230328113126127.png" alt="image-20230328113126127"></p>
<p>然后去任务管理器结束这个程序</p>
<p><img src="/./../img/image-20230328113223546.png" alt="image-20230328113223546"></p>
<p>代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 引入http模块</span><br><span class="line">let http = require(&#x27;http&#x27;)</span><br><span class="line">// 创建服务对象</span><br><span class="line">let server= http.createServer((req,res)=&gt;&#123; // 这个回调在浏览器给服务器发请求之后就会执行</span><br><span class="line">    res.end(&#x27;hello server&#x27;) // 设置响应体</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line">// 监听端口 启动服务</span><br><span class="line">server.listen(5000,()=&gt;&#123; // 启动完这个服务后 就会执行这个回调</span><br><span class="line">    console.log(&#x27;服务启动成功&#x27;)</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>运行完这个脚本后，本机的5000端口就被我们这个脚本占用了,只要有浏览器向我们这个服务器发送请求，我们那个回调函数就会执行（第4行那个回调）</p>
<h4 id="解决响应体-中文乱码-的问题"><a href="#解决响应体-中文乱码-的问题" class="headerlink" title="解决响应体 中文乱码 的问题"></a>解决响应体 中文乱码 的问题</h4><p>在响应头头设置一个参数，表示，我要给你的东西是html，并且你解析字符集的时候要用utf-8去解析</p>
<p><img src="/./../img/image-20230328105518145.png" alt="image-20230328105518145"></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 引入http模块</span></span><br><span class="line"><span class="keyword">let</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>)</span><br><span class="line"><span class="comment">// 创建服务对象</span></span><br><span class="line"><span class="keyword">let</span> server= http.<span class="title function_">createServer</span>(<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123; <span class="comment">// 这个回调在浏览器给服务器发请求之后就会执行</span></span><br><span class="line">    res.<span class="title function_">setHeader</span>(<span class="string">&#x27;content-type&#x27;</span>,<span class="string">&#x27;text/html;charset=utf-8&#x27;</span>)</span><br><span class="line">    res.<span class="title function_">end</span>(<span class="string">&#x27;你好啊，李银河&#x27;</span>) <span class="comment">// 设置响应体</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 监听端口 启动服务</span></span><br><span class="line">server.<span class="title function_">listen</span>(<span class="number">5000</span>,<span class="function">()=&gt;</span>&#123; <span class="comment">// 启动完这个服务后 就会执行这个回调</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;服务启动成功&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="获取请求报文中的内容"><a href="#获取请求报文中的内容" class="headerlink" title="获取请求报文中的内容"></a>获取请求报文中的内容</h4><p><img src="/./../img/image-20230328153545659.png" alt="image-20230328153545659"></p>
<h4 id="获取请求路径与查询字符串-方法1"><a href="#获取请求路径与查询字符串-方法1" class="headerlink" title="获取请求路径与查询字符串-方法1"></a>获取请求路径与查询字符串-方法1</h4><p><img src="/./../img/image-20230328162817956.png" alt="image-20230328162817956"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 引入http模块</span><br><span class="line">let http = require(&#x27;http&#x27;)</span><br><span class="line">// 引入url模块</span><br><span class="line">let url=require(&#x27;url&#x27;)</span><br><span class="line">// 创建服务对象</span><br><span class="line">let server= http.createServer((request,response)=&gt;&#123; // 这个回调在浏览器给服务器发请求之后就会执行</span><br><span class="line">    // 你第二个参数传的是true的话，它返回的参数数据是个对象</span><br><span class="line">    let res = url.parse(request.url,true)</span><br><span class="line">    console.log(res);</span><br><span class="line">    console.log(res.pathname);</span><br><span class="line">    console.log(res.query.keyword)</span><br><span class="line"></span><br><span class="line">    response.setHeader(&#x27;content-type&#x27;,&#x27;text/html;charset=utf-8&#x27;)</span><br><span class="line">    response.end(&#x27;你好啊，李银河&#x27;) // 设置响应体</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line">// 监听端口 启动服务</span><br><span class="line">server.listen(5000,()=&gt;&#123; // 启动完这个服务后 就会执行这个回调</span><br><span class="line">    console.log(&#x27;服务启动成功&#x27;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>url</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://127.0.0.1:5000/abc?keyword=6</span><br></pre></td></tr></table></figure>

<h4 id="获取请求路径与查询字符串-方法2"><a href="#获取请求路径与查询字符串-方法2" class="headerlink" title="获取请求路径与查询字符串-方法2"></a>获取请求路径与查询字符串-方法2</h4><p>见</p>
<p><img src="/./../img/image-20230328163718617.png" alt="image-20230328163718617"></p>
<p><img src="/./../img/image-20230328163834141.png" alt="image-20230328163834141"></p>
<h4 id="http练习（1）"><a href="#http练习（1）" class="headerlink" title="http练习（1）"></a>http练习（1）</h4><p><img src="/./../img/image-20230329225022198.png" alt="image-20230329225022198"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let http = require(&#x27;http&#x27;)</span><br><span class="line"></span><br><span class="line">// 创建http服务对象</span><br><span class="line">let server = http.createServer((req,res)=&gt;&#123;</span><br><span class="line">    res.setHeader(&#x27;content-type&#x27;,&#x27;text/html;charset=utf-8&#x27;)</span><br><span class="line">    // 获取请求的方法</span><br><span class="line">    let method = req.method</span><br><span class="line">    // 获取请求的url</span><br><span class="line">    let url = new URL(req.url,&#x27;http://127.0.0.1&#x27;)</span><br><span class="line">    let pathname = url.pathname</span><br><span class="line"></span><br><span class="line">if(method == &#x27;GET&#x27; &amp;&amp; pathname == &#x27;/login&#x27;)&#123;</span><br><span class="line">    res.end(&#x27;登陆界面&#x27;)</span><br><span class="line">&#125; else if(method == &#x27;GET&#x27; &amp;&amp; pathname==&#x27;/register&#x27;)&#123;</span><br><span class="line">    res.end(&#x27;注册界面&#x27;)</span><br><span class="line">&#125; else &#123;</span><br><span class="line">    res.end(&#x27;404&#x27;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line">server.listen(5000,()=&gt;&#123;</span><br><span class="line">    </span><br><span class="line">    console.log(&#x27;http服务启动成功&#x27;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="http练习（2）"><a href="#http练习（2）" class="headerlink" title="http练习（2）"></a>http练习（2）</h4><p><img src="/./../img/image-20230330100502261.png" alt="image-20230330100502261"></p>
<p>服务端代码</p>
<p><img src="/./../img/image-20230330104309902.png" alt="image-20230330104309902"></p>
<p>代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 引入http模块</span><br><span class="line">let http = require(&#x27;http&#x27;)</span><br><span class="line">// 引入fs模块</span><br><span class="line">let fs = require(&#x27;fs&#x27;)</span><br><span class="line">// 创建http服务对象</span><br><span class="line">let server = http.createServer((req,res)=&gt;&#123;</span><br><span class="line"></span><br><span class="line">    let html = fs.readFileSync(&#x27;./隔行变色表格.html&#x27;) // 这个方法返回的是一个buffer</span><br><span class="line">    res.end(html) // res.end这个方法既能读取字符串也可以读取buffer</span><br><span class="line"></span><br><span class="line">res.end(&#x27;hello&#x27;)</span><br><span class="line">&#125;)</span><br><span class="line">// 监听端口</span><br><span class="line">server.listen(5000,()=&gt;&#123;</span><br><span class="line">    console.log(&#x27;服务启动成功&#x27;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>html代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot; /&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot; /&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">      table &#123;</span><br><span class="line">        border-collapse: collapse;</span><br><span class="line">        width: 200px;</span><br><span class="line">        </span><br><span class="line">      &#125;</span><br><span class="line">      td &#123;</span><br><span class="line">        border: 1px solid black;</span><br><span class="line">        padding: 8px;</span><br><span class="line">        text-align: center;</span><br><span class="line">      &#125;</span><br><span class="line">      tr:nth-child(odd)&#123;</span><br><span class="line">        background-color: skyblue;</span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    &lt;table&gt;</span><br><span class="line">      &lt;tr&gt;</span><br><span class="line">        &lt;td&gt;&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;&lt;/td&gt;</span><br><span class="line">      &lt;/tr&gt;</span><br><span class="line">      &lt;tr&gt;</span><br><span class="line">        &lt;td&gt;&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;&lt;/td&gt;</span><br><span class="line">      &lt;/tr&gt;</span><br><span class="line">      &lt;tr&gt;</span><br><span class="line">        &lt;td&gt;&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;&lt;/td&gt;</span><br><span class="line">      &lt;/tr&gt;</span><br><span class="line">      &lt;tr&gt;</span><br><span class="line">        &lt;td&gt;&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;&lt;/td&gt;</span><br><span class="line">      &lt;/tr&gt;</span><br><span class="line">    &lt;/table&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    // 点击单元格变色</span><br><span class="line">    let tds = document.querySelectorAll(&#x27;td&#x27;)</span><br><span class="line">    tds.forEach(item =&gt; &#123;</span><br><span class="line">        item.onclick=function()&#123;</span><br><span class="line">            // 点击的时候先把所有的td背景色变为none</span><br><span class="line">            tds.forEach(item=&gt;&#123;</span><br><span class="line">                item.style.background = &#x27;none&#x27;</span><br><span class="line">            &#125;)</span><br><span class="line">            </span><br><span class="line">            this.style.background = &#x27;red&#x27;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;);</span><br><span class="line">  &lt;/script&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="网站的根目录"><a href="#网站的根目录" class="headerlink" title="网站的根目录"></a>网站的根目录</h3><p>http服务在哪个文件夹中寻找静态资源，那这个文件夹就叫做静态资源目录,也叫做网站的根目录</p>
<p>这里的page文件夹就是网站的根目录</p>
<p><img src="/./../img/image-20230331090734575.png" alt="image-20230331090734575"></p>
<h3 id="get与post的区别"><a href="#get与post的区别" class="headerlink" title="get与post的区别"></a>get与post的区别</h3><p>应用场景</p>
<p><img src="/./../img/image-20230403151044438.png" alt="image-20230403151044438"></p>
<p><img src="/./../img/image-20230403151225561.png" alt="image-20230403151225561"></p>
<h2 id="模块化"><a href="#模块化" class="headerlink" title="模块化"></a>模块化</h2><p>初体验</p>
<p><img src="/./../img/image-20230403155201575.png" alt="image-20230403155201575"></p>
<h3 id="引入模块"><a href="#引入模块" class="headerlink" title="引入模块"></a>引入模块</h3><p>看我打勾划线的即可</p>
<p><img src="/./../img/image-20230403160242349.png" alt="image-20230403160242349"></p>
<p>以下了解即可</p>
<p><img src="/./../img/image-20230403165920291.png" alt="image-20230403165920291"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 伪代码</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">function require(file)&#123;</span><br><span class="line">  //1. 将相对路径转为绝对路径，定位目标文件</span><br><span class="line">  let absolutePath = path.resolve(__dirname, file);</span><br><span class="line">  //2. 缓存检测 用与检测之前是否引入了这个包</span><br><span class="line">  if(caches[absolutePath])&#123;</span><br><span class="line">    return caches[absolutePath];</span><br><span class="line">  &#125;</span><br><span class="line">  //3. 读取文件的代码</span><br><span class="line">  let code = fs.readFileSync(absolutePath).toString();</span><br><span class="line">  //4. 包裹为一个函数 然后执行</span><br><span class="line">  let module = &#123;&#125;;</span><br><span class="line">  let exports = module.exports = &#123;&#125;;</span><br><span class="line">  (function (exports, require, module, __filename, __dirname) &#123;</span><br><span class="line">    const test = &#123;</span><br><span class="line">      name: &#x27;尚硅谷&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    module.exports = test;</span><br><span class="line">  </span><br><span class="line">    //输出</span><br><span class="line">    console.log(arguments.callee.toString());</span><br><span class="line">  &#125;)(exports, require, module, __filename, __dirname)</span><br><span class="line">  //5. 缓存结果</span><br><span class="line">  caches[absolutePath] = module.exports;</span><br><span class="line">  //6. 返回 module.exports 的值</span><br><span class="line">  return module.exports;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const m = require(&#x27;./me.js&#x27;);</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>require引入npm包基本流程</p>
<p><img src="/./../img/image-20230403220349859.png" alt="image-20230403220349859"></p>
<p>npm全局安装</p>
<p><img src="/./../img/image-20230403223805095.png" alt="image-20230403223805095"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm i -g nodemon </span><br></pre></td></tr></table></figure>

<blockquote>
<p> 全局安装的命令是不受工作目录的影响的</p>
</blockquote>
<p> 这个nodemon包的作用就是重启服务器：就是你改了你的服务端代码后，按照以前你还得重新node [文件名]</p>
<p>现在你只需要nodemon [文件名] 之后，你只要修改了代码，就会自动帮你重启服务器</p>
<h3 id="npm-i-的使用场景"><a href="#npm-i-的使用场景" class="headerlink" title="npm i 的使用场景"></a>npm i 的使用场景</h3><p>因为你的 node_modules不会被版本库保管（毕竟太大了）当你要把远程库的代码拉下来，你是不能运行的，你需要下载那些依赖，所以你需要npm i 一下，就会自动把那些依赖下载下来</p>
<hr></hr>

<p>npm 删除一个包</p>
<p>npm remove [包名]</p>
<hr></hr>

<p>npm run </p>
<p>你先给你常用的命令在packge.json里面配置别名，然后你npm run [别名]就会去执行那个命令</p>
<p><img src="/./../img/image-20230403230732881.png" alt="image-20230403230732881"></p>
<p><img src="/./../img/image-20230403231001168.png" alt="image-20230403231001168"></p>
<h3 id="yarn常用命令"><a href="#yarn常用命令" class="headerlink" title="yarn常用命令"></a>yarn常用命令</h3><p><img src="/./../img/image-20230403233540176.png" alt="image-20230403233540176"></p>
<hr></hr>

<h3 id="npm与yarn的选择"><a href="#npm与yarn的选择" class="headerlink" title="npm与yarn的选择"></a>npm与yarn的选择</h3><p><img src="/./../img/image-20230403233838665.png" alt="image-20230403233838665"></p>
<p><img src="/./../img/image-20230403233859611.png" alt="image-20230403233859611"></p>
<h3 id="nvm的介绍与使用"><a href="#nvm的介绍与使用" class="headerlink" title="nvm的介绍与使用"></a>nvm的介绍与使用</h3><p>简单来说就是让你更好地切换你的nodejs版本的</p>
<p>比如你的nodejs原来是18.0.0   然后你公司用的是6.0.0   一种方法是卸了重新装但是这样太麻烦了</p>
<p>另外一种方法就是用这个nvm的工具</p>
<p>具体用法见这个教程</p>
<p><img src="/./../img/image-20230403234419911.png" alt="image-20230403234419911"></p>
<h2 id="express框架"><a href="#express框架" class="headerlink" title="express框架"></a>express框架</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">app.all(&#x27;*&#x27;,(req,res)=&gt;&#123;</span><br><span class="line">    res.end(&#x27;llll&#x27;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>这段代码含义</p>
<p><img src="/./../img/image-20230410160457940.png" alt="image-20230410160457940"></p>
<h3 id="获取请求参数"><a href="#获取请求参数" class="headerlink" title="获取请求参数"></a>获取请求参数</h3><p>express 框架封装了一些 API 来方便获取请求报文中的数据，并且兼容原生 HTTP 模块的获取方式</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">app.all(&#x27;*&#x27;,(req,res)=&gt;&#123;</span><br><span class="line">    // 获取请求路径</span><br><span class="line">    console.log(req.path)</span><br><span class="line">    // 获取请求参数</span><br><span class="line">    console.log(req.query)</span><br><span class="line">    res.end(&#x27;hhhh&#x27;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>路径 ： <a href="http://127.0.0.1:3000/abc?a=100&b=22">http://127.0.0.1:3000/abc?a=100&amp;b=22</a></p>
<p>效果</p>
<p><img src="/./../img/image-20230410170638243.png" alt="image-20230410170638243"></p>
<p>其他API</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 获取ip</span><br><span class="line">    console.log(req.ip)</span><br><span class="line">    // 获取指定的请求头</span><br><span class="line">    console.log(req.get(&#x27;host&#x27;))</span><br></pre></td></tr></table></figure>

<h3 id="获取路由参数"><a href="#获取路由参数" class="headerlink" title="获取路由参数"></a>获取路由参数</h3><p>路由参数指的是url路径中的参数(数据)</p>
<p>params里包含了所有的路由参数，:id指的是占位符</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">app.get(&#x27;/:id.html&#x27;,(req,res)=&gt;&#123;</span><br><span class="line">console.log(req.params.id)</span><br><span class="line">res.end(&#x27;hello&#x27;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p><img src="/./../img/image-20230410173056154.png" alt="image-20230410173056154"></p>
<h3 id="路由参数练习"><a href="#路由参数练习" class="headerlink" title="路由参数练习"></a>路由参数练习</h3><p><img src="/./../img/image-20230411091415302.png" alt="image-20230411091415302"></p>
<p>服务端代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 引入express模块</span><br><span class="line">const express = require(&#x27;express&#x27;)</span><br><span class="line">// 引入json文件</span><br><span class="line">const &#123;singers&#125; = require(&#x27;./singers.json&#x27;)</span><br><span class="line">// console.log(singers) // 数组</span><br><span class="line">// 创建app对象</span><br><span class="line">let app=express()</span><br><span class="line">// 创建路由</span><br><span class="line">app.get(&#x27;/home&#x27;,(req,res)=&gt;&#123;</span><br><span class="line">res.end(&#x27;lll&#x27;)</span><br><span class="line">&#125;)</span><br><span class="line">app.get(&#x27;/:id.html&#x27;,(req,res)=&gt;&#123;</span><br><span class="line">console.log(req.params.id)</span><br><span class="line">res.end(&#x27;hello&#x27;)</span><br><span class="line">&#125;)</span><br><span class="line">app.get(&#x27;/singers/:id.html&#x27;,(req,res)=&gt;&#123;</span><br><span class="line">    let id = req.params.id</span><br><span class="line">    let result = singers.find((item)=&gt;&#123;</span><br><span class="line">        if(item.id===Number(id))&#123;</span><br><span class="line">            return true</span><br><span class="line"></span><br><span class="line">        &#125;&#125;)</span><br><span class="line">        </span><br><span class="line">        // 如果没有result</span><br><span class="line">    if(!result)&#123;</span><br><span class="line">        res.statusCode =404</span><br><span class="line">        res.end(`&lt;h1&gt;404 网页无法找到&lt;/h1&gt;`)</span><br><span class="line"></span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        res.end(`&lt;h1&gt;$&#123;result.singer_name&#125;&lt;/h1&gt;</span><br><span class="line">        &lt;img src=&quot;$&#123;result.singer_pic&#125;&quot; alt=&quot;&quot;&gt;</span><br><span class="line">        `)</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">// 监听端口</span><br><span class="line">app.listen(3000,()=&gt;&#123;</span><br><span class="line">    console.log(&#x27;3000端口已打开&#x27;)</span><br><span class="line">&#125;)</span><br><span class="line"> </span><br></pre></td></tr></table></figure>

<p>json代码</p>
<p>在老师资料文件夹里</p>
<p><img src="/./../img/image-20230411091632844.png" alt="image-20230411091632844"></p>
<p>这个练习几个点</p>
<p><img src="/./../img/image-20230411091740114.png" alt="image-20230411091740114"></p>
<p><img src="/./../img/image-20230411091805468.png" alt="image-20230411091805468"></p>
<h3 id="express响应设置常用api"><a href="#express响应设置常用api" class="headerlink" title="express响应设置常用api"></a>express响应设置常用api</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">app.get(&#x27;/res&#x27;,(req,res)=&gt;&#123;</span><br><span class="line">    // 原生响应</span><br><span class="line">    // res.statusCode=404</span><br><span class="line">    // res.statusMessage=&#x27;lyt&#x27;</span><br><span class="line">    // res.setHeader(&#x27;abc&#x27;,&#x27;kobe&#x27;)</span><br><span class="line">    // res.write(&#x27;hello&#x27;)</span><br><span class="line">    // res.end(&#x27;jams&#x27;)</span><br><span class="line"></span><br><span class="line">    // express响应</span><br><span class="line">    res.status(201) // 设置响应状态码</span><br><span class="line">    res.set(&#x27;player&#x27;,&#x27;kobe&#x27;)  // 设置响应头</span><br><span class="line">    res.send(&#x27;你好啊，李银河&#x27;) // 自动帮你设置utf-8</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>也可以连写</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">res.status(201).set(&#x27;abc&#x27;,&#x27;jams&#x27;).send(&#x27;你好啊&#x27;)</span><br></pre></td></tr></table></figure>

<p>其他常用api</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//3. 其他响应</span><br><span class="line">res.redirect(&#x27;http://atguigu.com&#x27;)//重定向</span><br><span class="line">res.download(&#x27;./package.json&#x27;);//下载响应</span><br><span class="line">res.sendFile(__dirname + &#x27;/home.html&#x27;) //响应文件内容</span><br></pre></td></tr></table></figure>

<h2 id="中间件"><a href="#中间件" class="headerlink" title="中间件"></a>中间件</h2><h3 id="全局中间件"><a href="#全局中间件" class="headerlink" title="全局中间件"></a>全局中间件</h3><p><img src="/./../img/image-20230411100918650.png" alt="image-20230411100918650"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 引入express模块</span><br><span class="line">const express = require(&#x27;express&#x27;)</span><br><span class="line">// 引入fs模块</span><br><span class="line">const fs = require(&#x27;fs&#x27;)</span><br><span class="line"></span><br><span class="line">// 创建app对象</span><br><span class="line">let app=express()</span><br><span class="line">// 声明中间件函数</span><br><span class="line">function recordMsg(req,res,next)&#123;</span><br><span class="line">    fs.appendFileSync(__dirname+&#x27;/log.txt&#x27;,`$&#123;req.url&#125;,$&#123;req.ip&#125; \r\n`)</span><br><span class="line">    </span><br><span class="line">    next()</span><br><span class="line">&#125;</span><br><span class="line">// 使用中间件</span><br><span class="line">app.use(recordMsg)</span><br><span class="line">// 创建路由</span><br><span class="line">app.get(&#x27;/home&#x27;,(req,res)=&gt;&#123;</span><br><span class="line">    fs.appendFileSync(__dirname+&#x27;/log.txt&#x27;,`$&#123;req.url&#125;,$&#123;req.ip&#125; \r\n`)</span><br><span class="line">    res.send(&#x27;你好啊&#x27;)</span><br><span class="line">&#125;)</span><br><span class="line">// 监听端口</span><br><span class="line">app.listen(3000,()=&gt;&#123;</span><br><span class="line">    console.log(&#x27;3000端口已打开&#x27;)</span><br><span class="line">&#125;)</span><br><span class="line"> </span><br></pre></td></tr></table></figure>

<h3 id="路由中间件"><a href="#路由中间件" class="headerlink" title="路由中间件"></a>路由中间件</h3><p>看一个需求</p>
<p><img src="/./../img/image-20230411101037964.png" alt="image-20230411101037964"></p>
<p><img src="/./../img/image-20230411102806516.png" alt="image-20230411102806516"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 引入express模块</span><br><span class="line">const express = require(&#x27;express&#x27;)</span><br><span class="line">// 引入fs模块</span><br><span class="line">const fs = require(&#x27;fs&#x27;)</span><br><span class="line"></span><br><span class="line">// 创建app对象</span><br><span class="line">let app=express()</span><br><span class="line"></span><br><span class="line">function check(req,res,next)&#123;</span><br><span class="line">if(req.query.code==&#x27;521&#x27;)&#123;</span><br><span class="line">    next()</span><br><span class="line">&#125; else&#123;</span><br><span class="line">    res.send(&#x27;暗号错误&#x27;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 创建路由</span><br><span class="line">app.get(&#x27;/home&#x27;,check,(req,res)=&gt;&#123;</span><br><span class="line">    </span><br><span class="line">    res.send(&#x27;你好啊&#x27;)</span><br><span class="line">&#125;)</span><br><span class="line">app.get(&#x27;/admin&#x27;,check,(req,res)=&gt;&#123;</span><br><span class="line">res.send(&#x27;lyh&#x27;)</span><br><span class="line">&#125;)</span><br><span class="line">// 监听端口</span><br><span class="line">app.listen(3000,()=&gt;&#123;</span><br><span class="line">    console.log(&#x27;3000端口已打开&#x27;)</span><br><span class="line">&#125;)</span><br><span class="line"> </span><br></pre></td></tr></table></figure>

<h3 id="静态资源中间件"><a href="#静态资源中间件" class="headerlink" title="静态资源中间件"></a>静态资源中间件</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 静态资源中间件   将当前目录下的public文件夹设置为网站的根目录</span><br><span class="line">app.use(express.static(__dirname+&#x27;/public&#x27;)) </span><br></pre></td></tr></table></figure>

<p><img src="/./../img/image-20230411111327285.png" alt="image-20230411111327285"></p>
<p>静态资源中间件与路由规则冲突</p>
<p><img src="/./../img/image-20230411111613804.png" alt="image-20230411111613804"></p>
<p>其实1先响应。原理：谁代码写在上面，谁先响应</p>
<h3 id="获取请求体数据"><a href="#获取请求体数据" class="headerlink" title="获取请求体数据"></a>获取请求体数据</h3><p>先看一个需求</p>
<p><img src="/./../img/image-20230411132850035.png" alt="image-20230411132850035"></p>
<p>form表单</p>
<p><img src="/./../img/image-20230411132918654.png" alt="image-20230411132918654"></p>
<p>服务端：</p>
<p>我们要用到一个包：body-parser</p>
<p>下载这个包</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm i body-parser</span><br></pre></td></tr></table></figure>

<p>导入这个包</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const bodyParser = require(&#x27;body-parser&#x27;);</span><br></pre></td></tr></table></figure>

<p>写中间件函数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//处理 querystring 格式的请求体</span><br><span class="line">let urlParser = bodyParser.urlencoded(&#123;extended:false&#125;));</span><br><span class="line">//处理 JSON 格式的请求体</span><br><span class="line">let jsonParser = bodyParser.json();</span><br></pre></td></tr></table></figure>

<p>使用中间件</p>
<p>这里我以路由的方式使用这个中间件（不以全局）</p>
<p><img src="/./../img/image-20230411132652094.png" alt="image-20230411132652094"></p>
<h3 id="防盗链"><a href="#防盗链" class="headerlink" title="防盗链"></a>防盗链</h3><p>见这个视频</p>
<p><img src="/./../img/image-20230411163230270.png" alt="image-20230411163230270"></p>
<hr></hr>

<h2 id="路由模块化"><a href="#路由模块化" class="headerlink" title="路由模块化"></a>路由模块化</h2><p>创建独立的 JS 文件（homeRouter.js）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//1. 导入 express</span><br><span class="line">const express = require(&#x27;express&#x27;);</span><br><span class="line">//2. 创建路由器对象</span><br><span class="line">const router = express.Router();</span><br><span class="line">//3. 在 router 对象身上添加路由</span><br><span class="line">router.get(&#x27;/&#x27;, (req, res) =&gt; &#123;</span><br><span class="line">res.send(&#x27;首页&#x27;);</span><br><span class="line">&#125;)</span><br><span class="line">router.get(&#x27;/cart&#x27;, (req, res) =&gt; &#123;</span><br><span class="line">res.send(&#x27;购物车&#x27;);</span><br><span class="line">&#125;);</span><br><span class="line">//4. 暴露</span><br><span class="line">module.exports = router;</span><br></pre></td></tr></table></figure>

<p>主文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const express = require(&#x27;express&#x27;);</span><br><span class="line">const app = express();</span><br><span class="line">//5.引入子路由文件</span><br><span class="line">const homeRouter = require(&#x27;./routes/homeRouter&#x27;);</span><br><span class="line">//6.设置和使用中间件</span><br><span class="line">app.use(homeRouter);</span><br><span class="line">app.listen(3000,()=&gt;&#123;</span><br><span class="line">console.log(&#x27;3000 端口启动....&#x27;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="ejs"><a href="#ejs" class="headerlink" title="ejs"></a>ejs</h2><p><img src="/./../img/image-20230411165858916.png" alt="image-20230411165858916"></p>
<h3 id="ejs初体验"><a href="#ejs初体验" class="headerlink" title="ejs初体验"></a>ejs初体验</h3><p>下载</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm i ejs --save</span><br></pre></td></tr></table></figure>

<p>代码示例</p>
<p>自行理解</p>
<p><img src="/./../img/image-20230411170230350.png" alt="image-20230411170230350"></p>
<p>这样我们生成html就会更加灵活</p>
<p>md ejs不学了 屁用没有</p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2023/03/16/vue3%E5%88%9D%E4%BD%93%E9%AA%8C/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="MVVM模型"><a href="#MVVM模型" class="headerlink" title="MVVM模型"></a>MVVM模型</h3><p><img src="/./../img/image-20230316203832272.png" alt="image-20230316203832272"></p>
<p><img src="/./../img/image-20230316203722671.png" alt="image-20230316203722671"></p>
<h3 id="template标签"><a href="#template标签" class="headerlink" title="template标签"></a>template标签</h3><p><img src="/./../img/image-20230316204708725.png" alt="image-20230316204708725"></p>
<p><img src="/./../img/image-20230316205027698.png" alt="image-20230316205027698"></p>
<h3 id="methods中this指向"><a href="#methods中this指向" class="headerlink" title="methods中this指向"></a>methods中this指向</h3><p>vue官方建议在methods中的方法不要写箭头函数 如果写箭头函数的话，里面的this指向的是window</p>
<p><img src="/./../img/image-20230317092137760.png" alt="image-20230317092137760"></p>
<h3 id="mustache语法"><a href="#mustache语法" class="headerlink" title="mustache语法"></a>mustache语法</h3><p>就是双大括号语法。里面可以写表达式，但是不能写语句</p>
<p><img src="/./../img/image-20230317163819293.png" alt="image-20230317163819293"></p>
<h3 id="v-once指令"><a href="#v-once指令" class="headerlink" title="v-once指令"></a>v-once指令</h3><p><img src="/./../img/image-20230317164254646.png" alt="image-20230317164254646"></p>
<h3 id="v-bind-对象写法"><a href="#v-bind-对象写法" class="headerlink" title="v-bind 对象写法"></a>v-bind 对象写法</h3><p><img src="/./../img/image-20230317220434075.png" alt="image-20230317220434075"></p>
<blockquote>
<p>布尔值决定这个类会不会被加上,如果是true，则有active这个类名，若是false则没有</p>
</blockquote>
<p><img src="/./../img/image-20230317220652828.png" alt="image-20230317220652828"></p>
<h4 id="这个对象写法也可以有多个键值对"><a href="#这个对象写法也可以有多个键值对" class="headerlink" title="这个对象写法也可以有多个键值对"></a>这个对象写法也可以有多个键值对</h4><p><img src="/./../img/image-20230317220830890.png" alt="image-20230317220830890"></p>
<blockquote>
<p>键名可以加引号也可以不加</p>
</blockquote>
<h4 id="默认的class与动态的class结合"><a href="#默认的class与动态的class结合" class="headerlink" title="默认的class与动态的class结合"></a>默认的class与动态的class结合</h4><p><img src="/./../img/image-20230317221108974.png" alt="image-20230317221108974"></p>
<h3 id="v-bind数组语法"><a href="#v-bind数组语法" class="headerlink" title="v-bind数组语法"></a>v-bind数组语法</h3><p><img src="/./../img/image-20230317221522429.png" alt="image-20230317221522429"></p>
<p><img src="/./../img/image-20230317221657991.png" alt="image-20230317221657991"></p>
<p>数组里还可以嵌套对象语法</p>
<p><img src="/./../img/image-20230317221751245.png" alt="image-20230317221751245"></p>
<h3 id="v-bind绑定style"><a href="#v-bind绑定style" class="headerlink" title="v-bind绑定style"></a>v-bind绑定style</h3><p><img src="/./../img/image-20230317222320219.png" alt="image-20230317222320219"></p>
<p><img src="/./../img/image-20230317222528093.png" alt="image-20230317222528093"></p>
<p><img src="/./../img/image-20230317222625041.png" alt="image-20230317222625041"></p>
<h4 id="v-bind绑定style的数组写法"><a href="#v-bind绑定style的数组写法" class="headerlink" title="v-bind绑定style的数组写法"></a>v-bind绑定style的数组写法</h4><p><img src="/./../img/image-20230317223806180.png" alt="image-20230317223806180"></p>
<h4 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">  &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span><br><span class="line">  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">  &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">  </span><br><span class="line">  &lt;div id=&quot;app&quot;&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">  &lt;template id=&quot;my-app&quot;&gt;</span><br><span class="line">    &lt;div :style=&quot;[style1Obj, style2Obj]&quot;&gt;哈哈哈&lt;/div&gt;</span><br><span class="line">    &lt;img :src=&quot;&quot; alt=&quot;&quot;&gt;</span><br><span class="line">    &lt;a :href=&quot;&quot;&gt;&lt;/a&gt;</span><br><span class="line">    &lt;div :class&gt;&lt;/div&gt;</span><br><span class="line">  &lt;/template&gt;</span><br><span class="line"></span><br><span class="line">  &lt;script src=&quot;./js/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    const App = &#123;</span><br><span class="line">      template: &#x27;#my-app&#x27;,</span><br><span class="line">      data() &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">          message: &quot;Hello World&quot;,</span><br><span class="line">          style1Obj: &#123;</span><br><span class="line">            color: &#x27;red&#x27;,</span><br><span class="line">            fontSize: &#x27;30px&#x27;</span><br><span class="line">          &#125;,</span><br><span class="line">          style2Obj: &#123;</span><br><span class="line">            textDecoration: &quot;underline&quot;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Vue.createApp(App).mount(&#x27;#app&#x27;);</span><br><span class="line">  &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<h3 id="v-bind动态绑定属性名称"><a href="#v-bind动态绑定属性名称" class="headerlink" title="v-bind动态绑定属性名称"></a>v-bind动态绑定属性名称</h3><p><img src="/./../img/image-20230317225007200.png" alt="image-20230317225007200"></p>
<p>源码 有空自己调试</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">  &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span><br><span class="line">  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">  &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">  </span><br><span class="line">  &lt;div id=&quot;app&quot;&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">  &lt;template id=&quot;my-app&quot;&gt;</span><br><span class="line">    &lt;div :[name]=&quot;value&quot;&gt;哈哈哈&lt;/div&gt;</span><br><span class="line">  &lt;/template&gt;</span><br><span class="line"></span><br><span class="line">  &lt;script src=&quot;./js/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    const App = &#123;</span><br><span class="line">      template: &#x27;#my-app&#x27;,</span><br><span class="line">      data() &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">          name: &quot;cba&quot;,</span><br><span class="line">          value: &quot;kobe&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Vue.createApp(App).mount(&#x27;#app&#x27;);</span><br><span class="line">  &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<h3 id="v-bind绑定对象"><a href="#v-bind绑定对象" class="headerlink" title="v-bind绑定对象"></a>v-bind绑定对象</h3><p><img src="/./../img/image-20230318103341148.png" alt="image-20230318103341148"></p>
<p>上述那种写法的效果等同于</p>
<p><img src="/./../img/image-20230318103502480.png" alt="image-20230318103502480"></p>
<h3 id="v-on的基本使用"><a href="#v-on的基本使用" class="headerlink" title="v-on的基本使用"></a>v-on的基本使用</h3><p><img src="/./../img/image-20230318104715035.png" alt="image-20230318104715035"></p>
<p>代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">  &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span><br><span class="line">  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">  &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line"></span><br><span class="line">  &lt;style&gt;</span><br><span class="line">    .area &#123;</span><br><span class="line">      width: 200px;</span><br><span class="line">      height: 200px;</span><br><span class="line">      background: red;</span><br><span class="line">    &#125;</span><br><span class="line">  &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">  </span><br><span class="line">  &lt;div id=&quot;app&quot;&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">  &lt;template id=&quot;my-app&quot;&gt;</span><br><span class="line">    &lt;!-- 完整写法: v-on:监听的事件=&quot;methods中方法&quot; --&gt;</span><br><span class="line">    &lt;button v-on:click=&quot;btn1Click&quot;&gt;按钮1&lt;/button&gt;</span><br><span class="line">    &lt;div class=&quot;area&quot; v-on:mousemove=&quot;mouseMove&quot;&gt;div&lt;/div&gt;</span><br><span class="line">    &lt;!-- 语法糖 --&gt;</span><br><span class="line">    &lt;button @click=&quot;btn1Click&quot;&gt;按钮1&lt;/button&gt;</span><br><span class="line">    &lt;!-- 绑定一个表达式: inline statement --&gt;</span><br><span class="line">    &lt;button @click=&quot;counter++&quot;&gt;&#123;&#123;counter&#125;&#125;&lt;/button&gt;</span><br><span class="line">    &lt;!-- 绑定一个对象 --&gt;</span><br><span class="line">    &lt;div class=&quot;area&quot; v-on=&quot;&#123;click: btn1Click, mousemove: mouseMove&#125;&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;area&quot; @=&quot;&#123;click: btn1Click, mousemove: mouseMove&#125;&quot;&gt;&lt;/div&gt;</span><br><span class="line">  &lt;/template&gt;</span><br><span class="line"></span><br><span class="line">  &lt;script src=&quot;./js/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    const App = &#123;</span><br><span class="line">      template: &#x27;#my-app&#x27;,</span><br><span class="line">      data() &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">          message: &quot;Hello World&quot;,</span><br><span class="line">          counter: 100</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;</span><br><span class="line">        btn1Click() &#123;</span><br><span class="line">          console.log(&quot;按钮1发生了点击&quot;);</span><br><span class="line">        &#125;,</span><br><span class="line">        mouseMove() &#123;</span><br><span class="line">          console.log(&quot;鼠标移动&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Vue.createApp(App).mount(&#x27;#app&#x27;);</span><br><span class="line">  &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;   </span><br></pre></td></tr></table></figure>

<h3 id="v-on绑定一个对象"><a href="#v-on绑定一个对象" class="headerlink" title="v-on绑定一个对象"></a>v-on绑定一个对象</h3><p>作用就是可以给这个dom同时绑定多个事件</p>
<p><img src="/./../img/image-20230318105530956.png" alt="image-20230318105530956"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">  &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span><br><span class="line">  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">  &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line"></span><br><span class="line">  &lt;style&gt;</span><br><span class="line">    .area &#123;</span><br><span class="line">      width: 200px;</span><br><span class="line">      height: 200px;</span><br><span class="line">      background: red;</span><br><span class="line">    &#125;</span><br><span class="line">  &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">  </span><br><span class="line">  &lt;div id=&quot;app&quot;&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">  &lt;template id=&quot;my-app&quot;&gt;</span><br><span class="line">    &lt;!-- 完整写法: v-on:监听的事件=&quot;methods中方法&quot; --&gt;</span><br><span class="line">    &lt;button v-on:click=&quot;btn1Click&quot;&gt;按钮1&lt;/button&gt;</span><br><span class="line">    &lt;div class=&quot;area&quot; v-on:mousemove=&quot;mouseMove&quot;&gt;div&lt;/div&gt;</span><br><span class="line">    &lt;!-- 语法糖 --&gt;</span><br><span class="line">    &lt;button @click=&quot;btn1Click&quot;&gt;按钮1&lt;/button&gt;</span><br><span class="line">    &lt;!-- 绑定一个表达式: inline statement --&gt;</span><br><span class="line">    &lt;button @click=&quot;counter++&quot;&gt;&#123;&#123;counter&#125;&#125;&lt;/button&gt;</span><br><span class="line">    &lt;!-- 绑定一个对象 --&gt;</span><br><span class="line">    &lt;div class=&quot;area&quot; v-on=&quot;&#123;click: btn1Click, mousemove: mouseMove&#125;&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;area&quot; @=&quot;&#123;click: btn1Click, mousemove: mouseMove&#125;&quot;&gt;&lt;/div&gt;</span><br><span class="line">  &lt;/template&gt;</span><br><span class="line"></span><br><span class="line">  &lt;script src=&quot;./js/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    const App = &#123;</span><br><span class="line">      template: &#x27;#my-app&#x27;,</span><br><span class="line">      data() &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">          message: &quot;Hello World&quot;,</span><br><span class="line">          counter: 100</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;</span><br><span class="line">        btn1Click() &#123;</span><br><span class="line">          console.log(&quot;按钮1发生了点击&quot;);</span><br><span class="line">        &#125;,</span><br><span class="line">        mouseMove() &#123;</span><br><span class="line">          console.log(&quot;鼠标移动&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Vue.createApp(App).mount(&#x27;#app&#x27;);</span><br><span class="line">  &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;   </span><br></pre></td></tr></table></figure>

<h3 id="v-on传递参数-event"><a href="#v-on传递参数-event" class="headerlink" title="v-on传递参数  $event"></a>v-on传递参数  $event</h3><p><img src="/./../img/image-20230318110151591.png" alt="image-20230318110151591"></p>
<h3 id="v-on修饰符"><a href="#v-on修饰符" class="headerlink" title="v-on修饰符"></a>v-on修饰符</h3><p><img src="/./../img/image-20230318110321600.png" alt="image-20230318110321600"></p>
<p>阻止冒泡</p>
<p><img src="/./../img/image-20230318110442217.png" alt="image-20230318110442217"></p>
<h3 id="条件渲染"><a href="#条件渲染" class="headerlink" title="条件渲染"></a>条件渲染</h3><p><img src="/./../img/image-20230318151950512.png" alt="image-20230318151950512"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">  &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span><br><span class="line">  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">  &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">  </span><br><span class="line">  &lt;div id=&quot;app&quot;&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">  &lt;template id=&quot;my-app&quot;&gt;</span><br><span class="line">    &lt;input type=&quot;text&quot; v-model=&quot;score&quot;&gt;</span><br><span class="line">    &lt;h2 v-if=&quot;score &gt; 90&quot;&gt;优秀&lt;/h2&gt;</span><br><span class="line">    &lt;h2 v-else-if=&quot;score &gt; 60&quot;&gt;良好&lt;/h2&gt;</span><br><span class="line">    &lt;h2 v-else&gt;不及格&lt;/h2&gt;</span><br><span class="line">  &lt;/template&gt;</span><br><span class="line"></span><br><span class="line">  &lt;script src=&quot;./js/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    const App = &#123;</span><br><span class="line">      template: &#x27;#my-app&#x27;,</span><br><span class="line">      data() &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">          score: 95</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Vue.createApp(App).mount(&#x27;#app&#x27;);</span><br><span class="line">  &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p><img src="/./../img/image-20230318152220515.png" alt="image-20230318152220515"></p>
<h4 id="v-show-与-v-if之间的区别"><a href="#v-show-与-v-if之间的区别" class="headerlink" title="v-show 与 v-if之间的区别"></a>v-show 与 v-if之间的区别</h4><p><img src="/./../img/image-20230318152818835.png" alt="image-20230318152818835"></p>
<p><img src="/./../img/image-20230318152741766.png" alt="image-20230318152741766"></p>
<blockquote>
<p>如果是true的话 那他俩没什么区别</p>
</blockquote>
<p><img src="/./../img/image-20230318152943693.png" alt="image-20230318152943693"></p>
<h3 id="v-for"><a href="#v-for" class="headerlink" title="v-for"></a>v-for</h3><h4 id="遍历数组-遍历对象"><a href="#遍历数组-遍历对象" class="headerlink" title="遍历数组,遍历对象"></a>遍历数组,遍历对象</h4><p><img src="/./../img/image-20230318171838743.png" alt="image-20230318171838743"></p>
<h4 id="遍历对象时如果是多个参数"><a href="#遍历对象时如果是多个参数" class="headerlink" title="遍历对象时如果是多个参数"></a>遍历对象时如果是多个参数</h4><p><img src="/./../img/image-20230318171900647.png" alt="image-20230318171900647"></p>
<h4 id="遍历数字"><a href="#遍历数字" class="headerlink" title="遍历数字"></a>遍历数字</h4><p><img src="/./../img/image-20230318172048635.png" alt="image-20230318172048635"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">  &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span><br><span class="line">  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">  &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">  </span><br><span class="line">  &lt;div id=&quot;app&quot;&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">  &lt;template id=&quot;my-app&quot;&gt;</span><br><span class="line">    &lt;h2&gt;电影列表&lt;/h2&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">      &lt;!-- 遍历数组 --&gt;</span><br><span class="line">      &lt;li v-for=&quot;(movie, index) in movies&quot;&gt;&#123;&#123;index+1&#125;&#125;.&#123;&#123;movie&#125;&#125;&lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">    &lt;h2&gt;个人信息&lt;/h2&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">      &lt;!-- 遍历对象 --&gt;</span><br><span class="line">      &lt;li v-for=&quot;(value, key, index) in info&quot;&gt;&#123;&#123;value&#125;&#125;-&#123;&#123;key&#125;&#125;-&#123;&#123;index&#125;&#125;&lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">    &lt;h2&gt;遍历数字&lt;/h2&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">      &lt;li v-for=&quot;(num, index) in 10&quot;&gt;&#123;&#123;num&#125;&#125;-&#123;&#123;index&#125;&#125;&lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">  &lt;/template&gt;</span><br><span class="line"></span><br><span class="line">  &lt;script src=&quot;./js/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    const App = &#123;</span><br><span class="line">      template: &#x27;#my-app&#x27;,</span><br><span class="line">      data() &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">          movies: [</span><br><span class="line">            &quot;星际穿越&quot;,</span><br><span class="line">            &quot;盗梦空间&quot;,</span><br><span class="line">            &quot;大话西游&quot;,</span><br><span class="line">            &quot;教父&quot;,</span><br><span class="line">            &quot;少年派&quot;</span><br><span class="line">          ],</span><br><span class="line">          info: &#123;</span><br><span class="line">            name: &quot;why&quot;,</span><br><span class="line">            age: 18,</span><br><span class="line">            height: 1.88</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Vue.createApp(App).mount(&#x27;#app&#x27;);</span><br><span class="line">  &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<h3 id="vue监听数组变化的方法"><a href="#vue监听数组变化的方法" class="headerlink" title="vue监听数组变化的方法"></a>vue监听数组变化的方法</h3><p><img src="/./../img/image-20230318172623593.png" alt="image-20230318172623593"></p>
<h3 id="vnode"><a href="#vnode" class="headerlink" title="vnode"></a>vnode</h3><p>vnode就是虚拟节点</p>
<p><img src="/./../img/image-20230318200248760.png" alt="image-20230318200248760"></p>
<p>vue会对模版上的东西进行解析，变为vnode，然后再通过一系列处理变成真实节点</p>
<p><img src="/./../img/image-20230318200444117.png" alt="image-20230318200444117"></p>
<p><img src="/./../img/image-20230318200843319.png" alt="image-20230318200843319"></p>
<h3 id="diff算法"><a href="#diff算法" class="headerlink" title="diff算法"></a>diff算法</h3><p><img src="/./../img/image-20230318223617879.png" alt="image-20230318223617879"></p>
<h3 id="案例-书籍购物车"><a href="#案例-书籍购物车" class="headerlink" title="案例:书籍购物车"></a>案例:书籍购物车</h3><p><img src="/./../img/image-20230319184845811.png" alt="image-20230319184845811"></p>
<p>书籍信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">books: [</span><br><span class="line">        &#123;</span><br><span class="line">          id: 1,</span><br><span class="line">          name: &#x27;《算法导论》&#x27;,</span><br><span class="line">          date: &#x27;2006-9&#x27;,</span><br><span class="line">          price: 85.00,</span><br><span class="line">          count: 1</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          id: 2,</span><br><span class="line">          name: &#x27;《UNIX编程艺术》&#x27;,</span><br><span class="line">          date: &#x27;2006-2&#x27;,</span><br><span class="line">          price: 59.00,</span><br><span class="line">          count: 1</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          id: 3,</span><br><span class="line">          name: &#x27;《编程珠玑》&#x27;,</span><br><span class="line">          date: &#x27;2008-10&#x27;,</span><br><span class="line">          price: 39.00,</span><br><span class="line">          count: 1</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          id: 4,</span><br><span class="line">          name: &#x27;《代码大全》&#x27;,</span><br><span class="line">          date: &#x27;2006-3&#x27;,</span><br><span class="line">          price: 128.00,</span><br><span class="line">          count: 1</span><br><span class="line">        &#125;,</span><br><span class="line">      ]</span><br><span class="line">   </span><br></pre></td></tr></table></figure>

<h4 id="先搭静态的结构和css"><a href="#先搭静态的结构和css" class="headerlink" title="先搭静态的结构和css"></a>先搭静态的结构和css</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">  &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span><br><span class="line">  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">  &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">  &lt;style&gt;</span><br><span class="line">    table &#123;</span><br><span class="line">  border: 1px solid #e9e9e9;</span><br><span class="line">  border-collapse: collapse;</span><br><span class="line">  border-spacing: 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">th, td &#123;</span><br><span class="line">  padding: 8px 16px;</span><br><span class="line">  border: 1px solid #e9e9e9;</span><br><span class="line">  text-align: left;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">th &#123;</span><br><span class="line">  background-color: #f7f7f7;</span><br><span class="line">  color: #5c6b77;</span><br><span class="line">  font-weight: 600;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.counter &#123;</span><br><span class="line">  margin: 0 5px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">  &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">  </span><br><span class="line">  &lt;div id=&quot;app&quot;&gt;</span><br><span class="line"></span><br><span class="line">  &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">  &lt;template id=&quot;my-app&quot;&gt;</span><br><span class="line">    &lt;table&gt;</span><br><span class="line">        &lt;thead&gt;</span><br><span class="line">            &lt;th&gt;&lt;/th&gt;</span><br><span class="line">            &lt;th&gt;书籍名称&lt;/th&gt;</span><br><span class="line">            &lt;th&gt;出版日期&lt;/th&gt;</span><br><span class="line">            &lt;th&gt;价格&lt;/th&gt;</span><br><span class="line">            &lt;th&gt;购买数量&lt;/th&gt;</span><br><span class="line">            &lt;th&gt;操作&lt;/th&gt;</span><br><span class="line">        &lt;/thead&gt;</span><br><span class="line">        &lt;tbody&gt;</span><br><span class="line">            &lt;tr v-for=&quot;(book,index) in books&quot; :key=&quot;book.id&quot;&gt;</span><br><span class="line">                &lt;td&gt;&#123;&#123;index + 1&#125;&#125;&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;&#123;&#123;book.name&#125;&#125;&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;&#123;&#123;book.date&#125;&#125;&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;&#123;&#123;book.price&#125;&#125;&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;</span><br><span class="line">                    &lt;button&gt;-&lt;/button&gt;</span><br><span class="line">                    &lt;span class=&quot;counter&quot;&gt;&#123;&#123;book.count&#125;&#125;&lt;/span&gt;</span><br><span class="line">                    &lt;button&gt;+&lt;/button&gt;</span><br><span class="line">                    </span><br><span class="line">                &lt;/td&gt;</span><br><span class="line">            &lt;/tr&gt;</span><br><span class="line">        &lt;/tbody&gt;</span><br><span class="line">    &lt;/table&gt;</span><br><span class="line">  &lt;/template&gt;</span><br><span class="line"></span><br><span class="line">  &lt;script src=&quot;./js/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    const App = &#123;</span><br><span class="line">      template: &#x27;#my-app&#x27;,</span><br><span class="line">      data() &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">          name:&#x27;hello&#x27;,</span><br><span class="line">          books: [</span><br><span class="line">        &#123;</span><br><span class="line">          id: 1,</span><br><span class="line">          name: &#x27;《算法导论》&#x27;,</span><br><span class="line">          date: &#x27;2006-9&#x27;,</span><br><span class="line">          price: 85.00,</span><br><span class="line">          count: 1</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          id: 2,</span><br><span class="line">          name: &#x27;《UNIX编程艺术》&#x27;,</span><br><span class="line">          date: &#x27;2006-2&#x27;,</span><br><span class="line">          price: 59.00,</span><br><span class="line">          count: 1</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          id: 3,</span><br><span class="line">          name: &#x27;《编程珠玑》&#x27;,</span><br><span class="line">          date: &#x27;2008-10&#x27;,</span><br><span class="line">          price: 39.00,</span><br><span class="line">          count: 1</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          id: 4,</span><br><span class="line">          name: &#x27;《代码大全》&#x27;,</span><br><span class="line">          date: &#x27;2006-3&#x27;,</span><br><span class="line">          price: 128.00,</span><br><span class="line">          count: 1</span><br><span class="line">        &#125;,</span><br><span class="line">      ]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Vue.createApp(App).mount(&#x27;#app&#x27;);</span><br><span class="line">  &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;   </span><br></pre></td></tr></table></figure>

<p>效果</p>
<p><img src="/./../img/image-20230319191418063.png" alt="image-20230319191418063"></p>
<h4 id="两个按钮逻辑"><a href="#两个按钮逻辑" class="headerlink" title="两个按钮逻辑"></a>两个按钮逻辑</h4><p><img src="/./../img/image-20230319192539099.png" alt="image-20230319192539099"></p>
<h4 id="移除逻辑"><a href="#移除逻辑" class="headerlink" title="移除逻辑"></a>移除逻辑</h4><p><img src="/./../img/image-20230319192919705.png" alt="image-20230319192919705"></p>
<h4 id="总价格逻辑"><a href="#总价格逻辑" class="headerlink" title="总价格逻辑"></a>总价格逻辑</h4><p><img src="/./../img/image-20230319193659584.png" alt="image-20230319193659584"></p>
<h4 id="小优化"><a href="#小优化" class="headerlink" title="小优化"></a>小优化</h4><p>如果购物车里没东西,不应该展示那个table,应该展示  “购物车为空”</p>
<p><img src="/./../img/image-20230319194855154.png" alt="image-20230319194855154"></p>
<p><img src="/./../img/image-20230319194909889.png" alt="image-20230319194909889"></p>
<h4 id="鼠标点击行变色需求"><a href="#鼠标点击行变色需求" class="headerlink" title="鼠标点击行变色需求"></a>鼠标点击行变色需求</h4><p>先写个demo 说一下大致原理</p>
<p><img src="/./../img/image-20230328210157084.png" alt="image-20230328210157084"></p>
<p>源码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">  &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span><br><span class="line">  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">  &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">  &lt;style&gt;</span><br><span class="line">    .active&#123;</span><br><span class="line">        color: red;</span><br><span class="line">    &#125;</span><br><span class="line">  &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">  &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">        &lt;li v-for=&quot;(movie,index) in movies&quot; :class=&quot;&#123;active: currentIndex==index&#125;&quot; @click=&quot;changeColor(index)&quot;&gt;&#123;&#123;movie&#125;&#125;&lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  </span><br><span class="line">  &lt;script src=&quot;./js/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    // 1.创建app</span><br><span class="line">    const app = Vue.createApp(&#123;</span><br><span class="line">      // data: option api</span><br><span class="line">      data() &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">          movies:[&#x27;星际穿越&#x27;,&#x27;阿凡达&#x27;,&#x27;果宝特攻&#x27;,&#x27;黑客帝国&#x27;],</span><br><span class="line">          currentIndex:-1</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;</span><br><span class="line">        changeColor(index)&#123;</span><br><span class="line">this.currentIndex = index</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    // 2.挂载app</span><br><span class="line">    app.mount(&quot;#app&quot;)</span><br><span class="line">  &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p>ok 知道了大致原理，就来做这个点击某一行，当前行变色而其他行不变颜色</p>
<p><img src="/./../img/image-20230328210902031.png" alt="image-20230328210902031"></p>
<p><img src="/./../img/image-20230328210912292.png" alt="image-20230328210912292"></p>
<p>源码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">  &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span><br><span class="line">  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">  &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">  &lt;style&gt;</span><br><span class="line">    table &#123;</span><br><span class="line">  border: 1px solid #e9e9e9;</span><br><span class="line">  border-collapse: collapse;</span><br><span class="line">  border-spacing: 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">th, td &#123;</span><br><span class="line">  padding: 8px 16px;</span><br><span class="line">  border: 1px solid #e9e9e9;</span><br><span class="line">  text-align: left;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">th &#123;</span><br><span class="line">  background-color: #f7f7f7;</span><br><span class="line">  color: #5c6b77;</span><br><span class="line">  font-weight: 600;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.counter &#123;</span><br><span class="line">  margin: 0 5px;</span><br><span class="line">&#125;</span><br><span class="line">.active &#123;</span><br><span class="line">    background-color: skyblue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">  &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">  </span><br><span class="line">  &lt;div id=&quot;app&quot;&gt;</span><br><span class="line"></span><br><span class="line">  &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">  &lt;template id=&quot;my-app&quot;&gt;</span><br><span class="line">    &lt;template v-if=&quot;books.length &gt;0&quot;&gt;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &lt;table&gt;</span><br><span class="line">                &lt;thead&gt;</span><br><span class="line">                    &lt;th&gt;&lt;/th&gt;</span><br><span class="line">                    &lt;th&gt;书籍名称&lt;/th&gt;</span><br><span class="line">                    &lt;th&gt;出版日期&lt;/th&gt;</span><br><span class="line">                    &lt;th&gt;价格&lt;/th&gt;</span><br><span class="line">                    &lt;th&gt;购买数量&lt;/th&gt;</span><br><span class="line">                    &lt;th&gt;操作&lt;/th&gt;</span><br><span class="line">                &lt;/thead&gt;</span><br><span class="line">                &lt;tbody&gt;</span><br><span class="line">                    &lt;tr v-for=&quot;(book,index) in books&quot; :key=&quot;book.id&quot; :class=&quot;&#123;active:index==currentIndex&#125;&quot; @click=&quot;changeBcc(index)&quot;&gt;</span><br><span class="line">                        &lt;td&gt;&#123;&#123;index + 1&#125;&#125;&lt;/td&gt;</span><br><span class="line">                        &lt;td&gt;&#123;&#123;book.name&#125;&#125;&lt;/td&gt;</span><br><span class="line">                        &lt;td&gt;&#123;&#123;book.date&#125;&#125;&lt;/td&gt;</span><br><span class="line">                        &lt;td&gt;&#123;&#123;book.price&#125;&#125;&lt;/td&gt;</span><br><span class="line">                        &lt;td&gt;</span><br><span class="line">                            &lt;button @click=&quot;book.count&gt;1 ? book.count-- : book.count + 0&quot;&gt;-&lt;/button&gt;</span><br><span class="line">                            &lt;span class=&quot;counter&quot;&gt;&#123;&#123;book.count&#125;&#125;&lt;/span&gt;</span><br><span class="line">                            &lt;button @click=&quot;book.count++&quot;&gt;+&lt;/button&gt;</span><br><span class="line">                            </span><br><span class="line">                        &lt;/td&gt;</span><br><span class="line">                        &lt;td&gt;</span><br><span class="line">                            &lt;button @click=&quot;remove(index)&quot;&gt;移除&lt;/button&gt;</span><br><span class="line">                        &lt;/td&gt;</span><br><span class="line">                    &lt;/tr&gt;</span><br><span class="line">                &lt;/tbody&gt;</span><br><span class="line">            &lt;/table&gt;</span><br><span class="line">            总价格&#123;&#123;totalPrice&#125;&#125;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/template&gt;</span><br><span class="line">    &lt;template v-else&gt;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            购物车为空</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/template&gt;</span><br><span class="line">  &lt;/template&gt;</span><br><span class="line"></span><br><span class="line">  &lt;script src=&quot;./js/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    const App = &#123;</span><br><span class="line">      template: &#x27;#my-app&#x27;,</span><br><span class="line">      data() &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">          name:&#x27;hello&#x27;,</span><br><span class="line">          currentIndex:-1,</span><br><span class="line">          books: [</span><br><span class="line">        &#123;</span><br><span class="line">          id: 1,</span><br><span class="line">          name: &#x27;《算法导论》&#x27;,</span><br><span class="line">          date: &#x27;2006-9&#x27;,</span><br><span class="line">          price: 85.00,</span><br><span class="line">          count: 1</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          id: 2,</span><br><span class="line">          name: &#x27;《UNIX编程艺术》&#x27;,</span><br><span class="line">          date: &#x27;2006-2&#x27;,</span><br><span class="line">          price: 59.00,</span><br><span class="line">          count: 1</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          id: 3,</span><br><span class="line">          name: &#x27;《编程珠玑》&#x27;,</span><br><span class="line">          date: &#x27;2008-10&#x27;,</span><br><span class="line">          price: 39.00,</span><br><span class="line">          count: 1</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          id: 4,</span><br><span class="line">          name: &#x27;《代码大全》&#x27;,</span><br><span class="line">          date: &#x27;2006-3&#x27;,</span><br><span class="line">          price: 128.00,</span><br><span class="line">          count: 1</span><br><span class="line">        &#125;,</span><br><span class="line">      ]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;</span><br><span class="line">        remove(index)&#123;</span><br><span class="line">this.books.splice(index,1)</span><br><span class="line">        &#125;,</span><br><span class="line">        changeBcc(index)&#123;</span><br><span class="line">this.currentIndex = index</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      computed:&#123;</span><br><span class="line">        totalPrice()&#123;</span><br><span class="line">            let price=0</span><br><span class="line">            for(let i=0;i&lt;this.books.length;i++)&#123;</span><br><span class="line">                price+=this.books[i].price*this.books[i].count</span><br><span class="line">            &#125;</span><br><span class="line">            return price</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Vue.createApp(App).mount(&#x27;#app&#x27;);</span><br><span class="line">  &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;   </span><br></pre></td></tr></table></figure>



<h4 id="源码-1"><a href="#源码-1" class="headerlink" title="源码"></a>源码</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">  &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span><br><span class="line">  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">  &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">  &lt;style&gt;</span><br><span class="line">    table &#123;</span><br><span class="line">  border: 1px solid #e9e9e9;</span><br><span class="line">  border-collapse: collapse;</span><br><span class="line">  border-spacing: 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">th, td &#123;</span><br><span class="line">  padding: 8px 16px;</span><br><span class="line">  border: 1px solid #e9e9e9;</span><br><span class="line">  text-align: left;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">th &#123;</span><br><span class="line">  background-color: #f7f7f7;</span><br><span class="line">  color: #5c6b77;</span><br><span class="line">  font-weight: 600;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.counter &#123;</span><br><span class="line">  margin: 0 5px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">  &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">  </span><br><span class="line">  &lt;div id=&quot;app&quot;&gt;</span><br><span class="line"></span><br><span class="line">  &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">  &lt;template id=&quot;my-app&quot;&gt;</span><br><span class="line">    &lt;template v-if=&quot;books.length &gt;0&quot;&gt;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &lt;table&gt;</span><br><span class="line">                &lt;thead&gt;</span><br><span class="line">                    &lt;th&gt;&lt;/th&gt;</span><br><span class="line">                    &lt;th&gt;书籍名称&lt;/th&gt;</span><br><span class="line">                    &lt;th&gt;出版日期&lt;/th&gt;</span><br><span class="line">                    &lt;th&gt;价格&lt;/th&gt;</span><br><span class="line">                    &lt;th&gt;购买数量&lt;/th&gt;</span><br><span class="line">                    &lt;th&gt;操作&lt;/th&gt;</span><br><span class="line">                &lt;/thead&gt;</span><br><span class="line">                &lt;tbody&gt;</span><br><span class="line">                    &lt;tr v-for=&quot;(book,index) in books&quot; :key=&quot;book.id&quot;&gt;</span><br><span class="line">                        &lt;td&gt;&#123;&#123;index + 1&#125;&#125;&lt;/td&gt;</span><br><span class="line">                        &lt;td&gt;&#123;&#123;book.name&#125;&#125;&lt;/td&gt;</span><br><span class="line">                        &lt;td&gt;&#123;&#123;book.date&#125;&#125;&lt;/td&gt;</span><br><span class="line">                        &lt;td&gt;&#123;&#123;book.price&#125;&#125;&lt;/td&gt;</span><br><span class="line">                        &lt;td&gt;</span><br><span class="line">                            &lt;button @click=&quot;book.count&gt;1 ? book.count-- : book.count + 0&quot;&gt;-&lt;/button&gt;</span><br><span class="line">                            &lt;span class=&quot;counter&quot;&gt;&#123;&#123;book.count&#125;&#125;&lt;/span&gt;</span><br><span class="line">                            &lt;button @click=&quot;book.count++&quot;&gt;+&lt;/button&gt;</span><br><span class="line">                            </span><br><span class="line">                        &lt;/td&gt;</span><br><span class="line">                        &lt;td&gt;</span><br><span class="line">                            &lt;button @click=&quot;remove(index)&quot;&gt;移除&lt;/button&gt;</span><br><span class="line">                        &lt;/td&gt;</span><br><span class="line">                    &lt;/tr&gt;</span><br><span class="line">                &lt;/tbody&gt;</span><br><span class="line">            &lt;/table&gt;</span><br><span class="line">            总价格&#123;&#123;totalPrice&#125;&#125;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/template&gt;</span><br><span class="line">    &lt;template v-else&gt;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            购物车为空</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/template&gt;</span><br><span class="line">  &lt;/template&gt;</span><br><span class="line"></span><br><span class="line">  &lt;script src=&quot;./js/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    const App = &#123;</span><br><span class="line">      template: &#x27;#my-app&#x27;,</span><br><span class="line">      data() &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">          name:&#x27;hello&#x27;,</span><br><span class="line">          books: [</span><br><span class="line">        &#123;</span><br><span class="line">          id: 1,</span><br><span class="line">          name: &#x27;《算法导论》&#x27;,</span><br><span class="line">          date: &#x27;2006-9&#x27;,</span><br><span class="line">          price: 85.00,</span><br><span class="line">          count: 1</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          id: 2,</span><br><span class="line">          name: &#x27;《UNIX编程艺术》&#x27;,</span><br><span class="line">          date: &#x27;2006-2&#x27;,</span><br><span class="line">          price: 59.00,</span><br><span class="line">          count: 1</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          id: 3,</span><br><span class="line">          name: &#x27;《编程珠玑》&#x27;,</span><br><span class="line">          date: &#x27;2008-10&#x27;,</span><br><span class="line">          price: 39.00,</span><br><span class="line">          count: 1</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          id: 4,</span><br><span class="line">          name: &#x27;《代码大全》&#x27;,</span><br><span class="line">          date: &#x27;2006-3&#x27;,</span><br><span class="line">          price: 128.00,</span><br><span class="line">          count: 1</span><br><span class="line">        &#125;,</span><br><span class="line">      ]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;</span><br><span class="line">        remove(index)&#123;</span><br><span class="line">this.books.splice(index,1)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      computed:&#123;</span><br><span class="line">        totalPrice()&#123;</span><br><span class="line">            let price=0</span><br><span class="line">            for(let i=0;i&lt;this.books.length;i++)&#123;</span><br><span class="line">                price+=this.books[i].price*this.books[i].count</span><br><span class="line">            &#125;</span><br><span class="line">            return price</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Vue.createApp(App).mount(&#x27;#app&#x27;);</span><br><span class="line">  &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;   </span><br></pre></td></tr></table></figure>

<h3 id="v-model绑定表单"><a href="#v-model绑定表单" class="headerlink" title="v-model绑定表单"></a>v-model绑定表单</h3><h3 id="v-model-修饰符"><a href="#v-model-修饰符" class="headerlink" title="v-model 修饰符"></a>v-model 修饰符</h3><p><img src="/./../img/image-20230320154744997.png" alt="image-20230320154744997"></p>
<p><img src="/./../img/image-20230320155605813.png" alt="image-20230320155605813"></p>
<p><img src="/./../img/image-20230320160520876.png" alt="image-20230320160520876"></p>
]]></content>
  </entry>
  <entry>
    <title>代码块演示</title>
    <url>/2023/03/14/%E4%BB%A3%E7%A0%81%E5%9D%97%E6%BC%94%E7%A4%BA/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">a</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hello world&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>todoList</title>
    <url>/2023/03/14/todo/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h4 id="第一步：把老师的给的-html-和-css-样式拆成组件的形式"><a href="#第一步：把老师的给的-html-和-css-样式拆成组件的形式" class="headerlink" title="第一步：把老师的给的 html 和 css 样式拆成组件的形式"></a>第一步：把老师的给的 html 和 css 样式拆成组件的形式</h4><p><img src="/./../img/image-20230314162314449.png" alt="image-20230314162314449"></p>
<blockquote>
<p>mylist 里包含 myitem</p>
</blockquote>
<h4 id="第二步-分析你的那些-todos-要放在哪？"><a href="#第二步-分析你的那些-todos-要放在哪？" class="headerlink" title="第二步 分析你的那些 todos 要放在哪？"></a>第二步 分析你的那些 todos 要放在哪？</h4><h5 id="因为那些-todos-是在-list-里面嘛-所以我们肯定考虑先放到-list-里面保存数据"><a href="#因为那些-todos-是在-list-里面嘛-所以我们肯定考虑先放到-list-里面保存数据" class="headerlink" title="因为那些 todos 是在 list 里面嘛 所以我们肯定考虑先放到 list 里面保存数据"></a>因为那些 todos 是在 list 里面嘛 所以我们肯定考虑先放到 list 里面保存数据</h5><p><img src="/./../img/image-20230314163133176.png" alt="image-20230314163133176"></p>
<p>myitem</p>
<p><img src="/./../img/image-20230314164205437.png" alt="image-20230314164205437"></p>
<h4 id="第三步-添加一个-todo"><a href="#第三步-添加一个-todo" class="headerlink" title="第三步 添加一个 todo"></a>第三步 添加一个 todo</h4><h5 id="涉及-子传父（父给子一个函数，子调用）"><a href="#涉及-子传父（父给子一个函数，子调用）" class="headerlink" title="涉及 子传父（父给子一个函数，子调用）"></a>涉及 子传父（父给子一个函数，子调用）</h5><h4 id=""><a href="#" class="headerlink" title=""></a><img src="/./../img/image-20230314170946330.png" alt="image-20230314170946330"></h4><p>然后你就要把这个 todoObj push 到 list 数组里了 但是这一步 你现在还办不了（对于初级来说办不了 得用后面的组件通信）。因为</p>
<p>你的 header 和 list 是同一级啊 所以 你得把 list 这个数组放到 app 里面</p>
<p><img src="/./../img/image-20230314171201367.png" alt="image-20230314171201367"></p>
<p>app通过props将list传给list</p>
<p><img src="/./../img/image-20230314222849496.png" alt="image-20230314222849496"></p>
<p>list组件接收</p>
<p><img src="/./../img/image-20230314222922406.png" alt="image-20230314222922406"></p>
<p>接下来我们实现如何 子传父（header 传给 app）</p>
<p>app组件代码</p>
<p><img src="/./../img/image-20230314223644500.png" alt="image-20230314223644500"></p>
<p><img src="/./../img/image-20230314223705813.png" alt="image-20230314223705813"></p>
<p>header组件代码</p>
<p><img src="/./../img/image-20230314223742032.png" alt="image-20230314223742032"></p>
<p>进一步优化代码</p>
<p><img src="/./../img/image-20230314224646071.png" alt="image-20230314224646071"></p>
<h4 id="第四步-勾选check"><a href="#第四步-勾选check" class="headerlink" title="第四步 勾选check"></a>第四步 勾选check</h4><p><img src="/./../img/image-20230315103510380.png" alt="image-20230315103510380"></p>
<p>思路 拿到勾选框的id  然后foreach那个todolist  找到那个对象，给done值取反</p>
<p><img src="/./../img/image-20230315103719009.png" alt="image-20230315103719009"></p>
<h5 id="数据在哪里-操作数据的方法就在哪里"><a href="#数据在哪里-操作数据的方法就在哪里" class="headerlink" title="数据在哪里 操作数据的方法就在哪里"></a>数据在哪里 操作数据的方法就在哪里</h5><p><img src="/./../img/image-20230315103815898.png" alt="image-20230315103815898"></p>
<p>然后用props把这个方法传到itme，然后item调用</p>
<h5 id="一个更简单的方法"><a href="#一个更简单的方法" class="headerlink" title="一个更简单的方法"></a>一个更简单的方法</h5><p>原理 如果你是个checkbox，v-mdoel如果绑定的是布尔值，那么这个布尔值就可以影响checkbox的勾选或者不勾选，而且v-model还是双向数据绑定，所以懂我的意思吧~</p>
<p><img src="/./../img/image-20230315104131608.png" alt="image-20230315104131608"></p>
<blockquote>
<p>但是这种作法不推荐，因为vue不推荐大家修改props，但是这么写不会报错的原因就是，vue检测props的修改是浅层地监视，不是深层。我上述那种修改todo.done属于修改对象里的某个属性（深层修改）</p>
</blockquote>
<h4 id="删除一个todo"><a href="#删除一个todo" class="headerlink" title="删除一个todo"></a>删除一个todo</h4><p>拿到要删除的那个todo的id，然后filter todolist数组</p>
<p><img src="/./../img/image-20230315113218393.png" alt="image-20230315113218393"></p>
<p><img src="/./../img/image-20230315113249379.png" alt="image-20230315113249379"></p>
<h4 id="统计已完成的todo"><a href="#统计已完成的todo" class="headerlink" title="统计已完成的todo"></a>统计已完成的todo</h4><h5 id="自己的写法"><a href="#自己的写法" class="headerlink" title="自己的写法"></a>自己的写法</h5><p><img src="/./../img/image-20230315170200855.png" alt="image-20230315170200855"></p>
<h5 id="用数组的reduce方法进行统计"><a href="#用数组的reduce方法进行统计" class="headerlink" title="用数组的reduce方法进行统计"></a>用数组的reduce方法进行统计</h5><p>代码</p>
<p><img src="/./../img/image-20230315170330557.png" alt="image-20230315170330557"></p>
<p>忘了见</p>
<p><img src="/./../img/image-20230315170307920.png" alt="image-20230315170307920"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let x = this.todos.reduce((pre,todo)=&gt;&#123;</span><br><span class="line">      // 第二个参数就是数组里的每一个元素</span><br><span class="line">      return pre + (todo.done==true?1:0) </span><br><span class="line">    &#125;,0) </span><br><span class="line">    return x </span><br></pre></td></tr></table></figure>

<h4 id="全选以及取消全选"><a href="#全选以及取消全选" class="headerlink" title="全选以及取消全选"></a>全选以及取消全选</h4><h5 id="当已完成的todo-x3D-全部todo-自动勾上"><a href="#当已完成的todo-x3D-全部todo-自动勾上" class="headerlink" title="当已完成的todo&#x3D;全部todo  自动勾上"></a>当已完成的todo&#x3D;全部todo  自动勾上</h5><p><img src="/./../img/image-20230315194705826.png" alt="image-20230315194705826"></p>
<p><img src="/./../img/image-20230315194833316.png" alt="image-20230315194833316"></p>
<h5 id="全选及取消全选"><a href="#全选及取消全选" class="headerlink" title="全选及取消全选"></a>全选及取消全选</h5><p>思路：点击复选框，获取复选框的状态（选中or没有选中） 然后拿这个状态值，去操作todolist里面的每一个todo，将每一个todo的done值都取和复选框一样的状态(app的方法通过props传给footer)</p>
<p><img src="/./../img/image-20230315195011116.png" alt="image-20230315195011116"></p>
<p><img src="/./../img/image-20230315195043064.png" alt="image-20230315195043064"></p>
<p><img src="/./../img/image-20230315195428757.png" alt="image-20230315195428757"></p>
<h4 id="清除已完成"><a href="#清除已完成" class="headerlink" title="清除已完成"></a>清除已完成</h4><p><img src="/./../img/image-20230315201542652.png" alt="image-20230315201542652"></p>
<p><img src="/./../img/image-20230315201529160.png" alt="image-20230315201529160"></p>
<p>这个clearDoned在app里面写</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">clearDoned()&#123;</span><br><span class="line">      this.todos=this.todos.filter((todo)=&gt;&#123;</span><br><span class="line">return todo.done!=true</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h4 id="本地存储"><a href="#本地存储" class="headerlink" title="本地存储"></a>本地存储</h4><p>如果忘了基本api可以去看onenote笔记  看那两页就够了</p>
<p><img src="/./../img/image-20230315220648307.png" alt="image-20230315220648307"></p>
<p>具体代码</p>
<p><img src="/./../img/image-20230315221057537.png" alt="image-20230315221057537"></p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2023/03/17/this%E6%8C%87%E5%90%91/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>-–</p>
<p>title: this指向</p>
<p>date: 2023-03-17 12:37:36</p>
<p>tags:</p>
<p>-–</p>
<h2 id="默认绑定规则：window"><a href="#默认绑定规则：window" class="headerlink" title="默认绑定规则：window"></a>默认绑定规则：window</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>===<span class="variable language_">window</span>) <span class="comment">// true</span></span><br></pre></td></tr></table></figure>



<h3 id="函数的独立调用：window"><a href="#函数的独立调用：window" class="headerlink" title="函数的独立调用：window"></a>函数的独立调用：window</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title function_">test</span>() <span class="comment">// window</span></span><br></pre></td></tr></table></figure>

<p>你可以理解为 window.test() </p>
<h4 id="立即执行函数：-window"><a href="#立即执行函数：-window" class="headerlink" title="立即执行函数： window"></a>立即执行函数： window</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>) <span class="comment">// window</span></span><br><span class="line">        &#125;)()</span><br></pre></td></tr></table></figure>

<blockquote>
<p>在浏览器环境中，立即执行函数的this指向window。可能以后在模块中指向的是模块中的环境.如果换一个环境，它指向的是相应的全局对象</p>
</blockquote>
<h3 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 闭包：函数嵌套函数，内部函数就是闭包</span></span><br><span class="line">        <span class="comment">// 内部函数没有执行完，外部函数的变量不会被销毁</span></span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">outfun</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="keyword">let</span> a = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">function</span> <span class="title function_">inerfun</span>(<span class="params"></span>)&#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(a) <span class="comment">//1</span></span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> inerfun</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> b = <span class="title function_">outfun</span>()</span><br><span class="line">        </span><br><span class="line">        <span class="title function_">b</span>() <span class="comment">// window</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>你可以理解为是函数独立调用</p>
</blockquote>
<h2 id="隐式绑定：谁调用，this指向谁"><a href="#隐式绑定：谁调用，this指向谁" class="headerlink" title="隐式绑定：谁调用，this指向谁"></a>隐式绑定：谁调用，this指向谁</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">            <span class="attr">a</span>:<span class="number">1</span>,</span><br><span class="line">            <span class="attr">b</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        obj.<span class="title function_">b</span>()<span class="comment">// this指向obj这个对象</span></span><br></pre></td></tr></table></figure>

<hr></hr>

<hr></hr>

<p>只有函数执行，里面的this才有指向，函数不执行，里面的this毫无意义。</p>
<p>下图中，这两个this是不一样的。每一个函数的执行都会有一个自身的this指向，虽然可能它们指向的是同一个东西，但每个this本身是不一样的</p>
<p>上面一个this是obj，因为是obj调用</p>
<p>下面一个是window，因为自调用(函数独立调用)</p>
<p><img src="/./../img/image-20230317104206653.png" alt="image-20230317104206653"></p>
<hr></hr>

<p>看一道题目</p>
<p><img src="/./../img/image-20230317153545250.png" alt="image-20230317153545250"></p>
<blockquote>
<p>函数中的this只有函数被调用的时候，才会有指向，因为是obj调用的，所以this的指向是obj</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function foo()&#123;</span><br><span class="line">            console.log(this)</span><br><span class="line">        &#125;</span><br><span class="line">        let obj=&#123;</span><br><span class="line">            a:1,</span><br><span class="line">            foo:foo</span><br><span class="line">        &#125;</span><br><span class="line">        let bar = obj.foo</span><br><span class="line">        bar() // window</span><br></pre></td></tr></table></figure>

<blockquote>
<p> 调用,所以是window</p>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2023/03/21/webpack/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>-–</p>
<p>title: webpack</p>
<p>date: 2023-03-21 12:37:36</p>
<p>tags:</p>
<p>-–</p>
<h3 id="大概思路"><a href="#大概思路" class="headerlink" title="大概思路"></a>大概思路</h3><p><img src="/./../img/image-20230321212532898.png" alt="image-20230321212532898"></p>
<p>就是 ts，less，sass，你的浏览器识别不了，但是这些语言却能提高代码的编写效率还有什么健壮性啊等等，所以我们需要用打包工具将这些浏览器识别不了的语言打包成浏览器可以识别的</p>
<p>大概思路：（具体去见视频）</p>
<p>就是你通过打包命令，将js进行处理，然后放到了一个dist文件夹里（里面管静态资源的）。</p>
<p>你要给你的webpack进行配置，配置文件里写ta打包的入口文件，然后会根据入口文件的依赖来打包所需的文件，然后你也可以指定输出的文件夹，默认是dist。然后在你的html引入打包后的文件</p>
<p>但是，webpack默认是不能打包css还有md等其他文件，你就需要下载loader了。</p>
<p>比如你要打包css文件，你要下载css loader，你npm下载后，你要使用这个loader，你可以有很多种方式，常用的就是下面这种方式，</p>
<p><img src="/./../img/image-20230322102305412.png" alt="image-20230322102305412"></p>
<p>但是你还需要下一个style loader，用于将你打包后的css文件插入html中</p>
<p>对less文件进行打包</p>
<p>你需要借助lessc将less文件，转换为css文件。这个lessc与webpack没什么关系，是一个独立的工具</p>
<p><img src="/./../img/image-20230322104049940.png" alt="image-20230322104049940"></p>
<p><img src="/./../img/image-20230322104114070.png" alt="image-20230322104114070"></p>
<p>你要用lessloader  必须下lessc，因为less loader是依赖lessc的</p>
<h3 id="打开尚硅谷的webpack文档"><a href="#打开尚硅谷的webpack文档" class="headerlink" title="打开尚硅谷的webpack文档"></a>打开尚硅谷的webpack文档</h3><p><img src="/./../img/image-20230322223954377.png" alt="image-20230322223954377"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm start</span><br></pre></td></tr></table></figure>

<p><img src="/./../img/image-20230322224039402.png" alt="image-20230322224039402"></p>
<h4 id="本地地址"><a href="#本地地址" class="headerlink" title="本地地址"></a>本地地址</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://localhost:8080/webpack5-docs/</span><br></pre></td></tr></table></figure>

<p>效果</p>
<p><img src="/./../img/image-20230322224123767.png" alt="image-20230322224123767"></p>
<h3 id="目录介绍"><a href="#目录介绍" class="headerlink" title="目录介绍"></a>目录介绍</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">webpack_code # 项目根目录（所有指令必须在这个目录运行）</span><br><span class="line">    └── src # 项目源码目录</span><br><span class="line">        ├── js # js文件目录</span><br><span class="line">        │   ├── count.js</span><br><span class="line">        │   └── sum.js</span><br><span class="line">        └── main.js # 项目主文件，打包入口</span><br></pre></td></tr></table></figure>

<h3 id="npx是个啥"><a href="#npx是个啥" class="headerlink" title="npx是个啥"></a>npx是个啥</h3><p>你执行完下面那个命令后，会在你的项目中生成一些包</p>
<p><img src="/./../img/image-20230322235848123.png" alt="image-20230322235848123"></p>
<p><img src="/./../img/image-20230322235917864.png" alt="image-20230322235917864"></p>
<p>然后这个npx相当于自动给你配了一个环境变量，指向的是这个bin目录</p>
<p><img src="/./../img/image-20230323000005971.png" alt="image-20230323000005971"></p>
<p>npx webpack 就是调用里面那个webpack这个包</p>
<p><img src="/./../img/image-20230323000117366.png" alt="image-20230323000117366"></p>
<h3 id="打包css的webpack配置"><a href="#打包css的webpack配置" class="headerlink" title="打包css的webpack配置"></a>打包css的webpack配置</h3><p>具体操作看官网或者尚硅谷的那个文档</p>
<p>这里先提醒一下，你需要下载两个loader，一个是cssloader 一个是style-loader(以后不知道要下多少个loader的时候，你就去看官网)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const path = require(&quot;path&quot;)</span><br><span class="line">module.exports = &#123;</span><br><span class="line">    // 入口</span><br><span class="line">    entry: &quot;./src/main.js&quot;,</span><br><span class="line">    // 输出</span><br><span class="line">    output: &#123;</span><br><span class="line">        // 这里要写绝对路径</span><br><span class="line">        // __dirname：当前文件所在目录</span><br><span class="line">        path: path.resolve(__dirname,&#x27;dist&#x27;), // 放到当前文件所在目录文件夹下的dist文件夹</span><br><span class="line">        filename:&#x27;main.js&#x27;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    // 加载器</span><br><span class="line">    module: &#123;</span><br><span class="line">        // loader的配置</span><br><span class="line">      rules: [</span><br><span class="line">        &#123;</span><br><span class="line">            test: /\.css$/i,</span><br><span class="line">            // use的执行顺序:后面的先执行</span><br><span class="line">            // cssloader作用:将css资源编译成common.js到js中</span><br><span class="line">            // styleloader的作用:动态创建一个 Style 标签,将js中的css放入style标签中，再放入html</span><br><span class="line">            // 用人话说就是 cssloader将css编译打包到js中，styleloader把打包好的css代码从js中放到html的style标签中</span><br><span class="line">            </span><br><span class="line">            use: [&quot;style-loader&quot;, &quot;css-loader&quot;], </span><br><span class="line">          &#125;,</span><br><span class="line">      ],</span><br><span class="line">    &#125;,</span><br><span class="line">    // 插件</span><br><span class="line">    plugins: [],</span><br><span class="line">    // 模式</span><br><span class="line">    mode: &quot;development&quot;,</span><br><span class="line">  &#125;;</span><br></pre></td></tr></table></figure>

<p>webpack.config.js备份</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const path = require(&quot;path&quot;)</span><br><span class="line">const HtmlWebpackPlugin = require(&quot;html-webpack-plugin&quot;);</span><br><span class="line">module.exports = &#123;</span><br><span class="line">    // 入口</span><br><span class="line">    entry: &quot;./src/main.js&quot;,</span><br><span class="line">    // 输出</span><br><span class="line">    output: &#123;</span><br><span class="line">        // 这里要写绝对路径</span><br><span class="line">        // __dirname：当前文件所在目录</span><br><span class="line">        path: path.resolve(__dirname,&#x27;dist&#x27;), // 放到当前文件所在目录文件夹下的dist文件夹</span><br><span class="line">        filename: &quot;static/js/main.js&quot;, // 将 js 文件输出到 static/js 目录中</span><br><span class="line">        // 自动清空上一次打包的内容</span><br><span class="line">        // 原理:在打包前把path整个目录清空然后再打包</span><br><span class="line">        clean:true</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    // 加载器</span><br><span class="line">    module: &#123;</span><br><span class="line">        // loader的配置</span><br><span class="line">      rules: [</span><br><span class="line">        &#123;</span><br><span class="line">            test: /\.css$/i,</span><br><span class="line">            // use的执行顺序:后面的先执行</span><br><span class="line">            // cssloader作用:将css资源编译成common.js到js中</span><br><span class="line">            // styleloader的作用:动态创建一个 Style 标签,将js中的css放入style标签中，再放入html</span><br><span class="line">            // 用人话说就是 cssloader将css编译打包到js中，styleloader把打包好的css代码从js中放到html的style标签中</span><br><span class="line">            </span><br><span class="line">            use: [&quot;style-loader&quot;, &quot;css-loader&quot;], </span><br><span class="line">          &#125;,</span><br><span class="line">          // less相关的loader</span><br><span class="line">          &#123;</span><br><span class="line">            test: /\.less$/i,</span><br><span class="line">            use: [</span><br><span class="line">              // compiles Less to CSS</span><br><span class="line">              &quot;style-loader&quot;,</span><br><span class="line">              &quot;css-loader&quot;,</span><br><span class="line">              &quot;less-loader&quot;,</span><br><span class="line">            ],</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            test: /\.(png|jpe?g|gif|webp)$/,</span><br><span class="line">            type: &quot;asset&quot;,</span><br><span class="line">            parser: &#123;</span><br><span class="line">              dataUrlCondition: &#123;</span><br><span class="line">                maxSize: 10 * 1024, // 小于10kb的图片会被base64处理</span><br><span class="line">              &#125;,</span><br><span class="line">            &#125;,</span><br><span class="line">            generator: &#123;</span><br><span class="line">              // 将图片文件输出到 static/imgs 目录中</span><br><span class="line">              // 将图片文件命名 [hash:8][ext][query]</span><br><span class="line">              // [hash:8]: hash值取8位</span><br><span class="line">              // [ext]: 使用之前的文件扩展名</span><br><span class="line">              // [query]: 添加之前的query参数</span><br><span class="line">              filename: &quot;static/imgs/[hash:8][ext][query]&quot;,</span><br><span class="line">            &#125;,</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            test: /\.(ttf|woff2?)$/,</span><br><span class="line">            type: &quot;asset/resource&quot;,</span><br><span class="line">            generator: &#123;</span><br><span class="line">              filename: &quot;static/media/[hash:8][ext][query]&quot;,</span><br><span class="line">            &#125;,</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            test: /\.js$/,</span><br><span class="line">            exclude: /node_modules/, // 排除node_modules代码不编译</span><br><span class="line">            loader: &quot;babel-loader&quot;,</span><br><span class="line">          &#125;,</span><br><span class="line">      ],</span><br><span class="line">    &#125;,</span><br><span class="line">    // 插件</span><br><span class="line">    plugins: [</span><br><span class="line">      new HtmlWebpackPlugin(&#123;</span><br><span class="line">        // 以 public/index.html 为模板创建文件</span><br><span class="line">        // 新的html文件有两个特点：1. 内容和源文件一致 2. 自动引入打包生成的js等资源</span><br><span class="line">        template: path.resolve(__dirname, &quot;public/index.html&quot;),</span><br><span class="line">      &#125;),</span><br><span class="line">    ],</span><br><span class="line">     // 开发服务器</span><br><span class="line">  devServer: &#123;</span><br><span class="line">    host: &quot;localhost&quot;, // 启动服务器域名</span><br><span class="line">    port: &quot;3000&quot;, // 启动服务器端口号</span><br><span class="line">    open: true, // 是否自动打开浏览器</span><br><span class="line">  &#125;,</span><br><span class="line">    // 模式</span><br><span class="line">    mode: &quot;development&quot;,</span><br><span class="line">  &#125;;</span><br></pre></td></tr></table></figure>

<h3 id="提取css成单独的文件"><a href="#提取css成单独的文件" class="headerlink" title="提取css成单独的文件"></a>提取css成单独的文件</h3><p>你跟着文档做完那些步骤后，npm run build之后，ta会打包一个独立的css文件，在你static文件夹下的css文件夹里的main.css</p>
<p><img src="/./../img/image-20230328082604310.png" alt="image-20230328082604310"></p>
<p>之所以会输出到这个文件夹是因为你下面的指令</p>
<p><img src="/./../img/image-20230328082641527.png" alt="image-20230328082641527"></p>
<center>webpack.prod.js</center>

<p>你现在main.css是长这样</p>
<p><img src="/./../img/image-20230328084207777.png" alt="image-20230328084207777"></p>
<p>你要对它进行压缩</p>
<p>按照文档的步骤去操作</p>
<p><img src="/./../img/image-20230328084254241.png" alt="image-20230328084254241">‘</p>
]]></content>
  </entry>
  <entry>
    <title>以后会用到的配置</title>
    <url>/2023/03/15/%E4%BB%A5%E5%90%8E%E4%BC%9A%E7%94%A8%E5%88%B0%E7%9A%84%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="转载别人文章的规范"><a href="#转载别人文章的规范" class="headerlink" title="转载别人文章的规范"></a>转载别人文章的规范</h3><h4 id="up的教程"><a href="#up的教程" class="headerlink" title="up的教程"></a>up的教程</h4><p><img src="/./../img/image-20230315152554412.png" alt="image-20230315152554412"></p>
<h4 id="官方文档"><a href="#官方文档" class="headerlink" title="官方文档"></a>官方文档</h4><p><img src="/./../img/image-20230315152624239.png" alt="image-20230315152624239"></p>
<h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">copyright:  false</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">copyright _author: xxxx </span><br><span class="line">copyright_ author _href: https://xxxxxx.com </span><br><span class="line">copyright_ url: https://xxxxxx.com </span><br><span class="line">copyright _info: 此文章版权归xxxxx所有，如有转载，请注明来自原作者</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2023/04/23/%E5%A5%87%E6%8A%80%E6%B7%AB%E5%B7%A7/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="…运算符复制对象"><a href="#…运算符复制对象" class="headerlink" title="…运算符复制对象"></a>…运算符复制对象</h3><p>首先先复习一下…运算符的基础语法</p>
<p><img src="/./../img/image-20230423161320274.png" alt="image-20230423161320274"></p>
<p>虽然我们不能用它展开对象，但是可以用它复制对象</p>
<p><img src="/./../img/image-20230423161602110.png" alt="image-20230423161602110"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let car=&#123;</span><br><span class="line">      name:&#x27;benci&#x27;,</span><br><span class="line">      wheel:4</span><br><span class="line">    &#125;</span><br><span class="line">    let copyCar = &#123;...car&#125;</span><br><span class="line">    console.log(copyCar) // &#123;name:&#x27;benci&#x27;,wheel:4&#125;</span><br><span class="line"></span><br><span class="line">    copyCar.name = &#x27;aodi&#x27;</span><br><span class="line">    console.log(car.name) // benci</span><br></pre></td></tr></table></figure>

<p>复制对象同时，修改它的属性</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let car=&#123;</span><br><span class="line">      name:&#x27;benci&#x27;,</span><br><span class="line">      wheel:4</span><br><span class="line">    &#125;</span><br><span class="line">    let copyCar = &#123;...car,name:&#x27;aodi&#x27;,price:1000&#125;</span><br><span class="line">    console.log(copyCar) //&#123; name: &#x27;aodi&#x27;, wheel: 4, price: 1000&#125;</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2023/03/20/%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%B5%85%E6%8B%B7%E8%B4%9D/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>-–</p>
<p>title: 对象的拷贝</p>
<p>date: 2023-03-20 12:37:36</p>
<p>tags:</p>
<p>-–</p>
<h3 id="对象的引用"><a href="#对象的引用" class="headerlink" title="对象的引用"></a>对象的引用</h3><p><img src="/./../img/image-20230320103610460.png" alt="image-20230320103610460"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 对象的引用赋值</span><br><span class="line">let info= &#123;name:&#x27;kobe&#x27;&#125;</span><br><span class="line">        let obj = info </span><br><span class="line">        info.name = &#x27;jams&#x27;</span><br><span class="line">        console.log(obj.name); // jams</span><br></pre></td></tr></table></figure>



<h3 id="对象的浅拷贝"><a href="#对象的浅拷贝" class="headerlink" title="对象的浅拷贝"></a>对象的浅拷贝</h3><p><img src="/./../img/image-20230320103450865.png" alt="image-20230320103450865"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 对象的浅拷贝</span><br><span class="line">        let info= &#123;name:&#x27;kobe&#x27;&#125;</span><br><span class="line">        let obj = Object.assign(&#123;&#125;,info)</span><br><span class="line">        info.name = &#x27;jams&#x27;</span><br><span class="line">        console.log(obj.name); // kobe</span><br></pre></td></tr></table></figure>

<p>如果拷贝的对象里的属性中的值也是对象</p>
<p><img src="/./../img/image-20230320111829811.png" alt="image-20230320111829811"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let info = &#123;name:&#x27;kobe&#x27;,friend:&#123;name:&#x27;curry&#x27;&#125;&#125;</span><br><span class="line">        let obj = Object.assign(&#123;&#125;,info)</span><br><span class="line">        info.friend.name = &#x27;jams&#x27;</span><br><span class="line">        console.log(obj.friend.name); // jams</span><br></pre></td></tr></table></figure>

<h3 id="对象的深拷贝"><a href="#对象的深拷贝" class="headerlink" title="对象的深拷贝"></a>对象的深拷贝</h3><h4 id="原生实现"><a href="#原生实现" class="headerlink" title="原生实现"></a>原生实现</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let info = &#123;name:&#x27;kobe&#x27;,friend:&#123;name:&#x27;curry&#x27;&#125;&#125;</span><br><span class="line">        let obj = JSON.parse(JSON.stringify(info)) //json.stryingfy 将对象转化为字符串  json.parse 将字符串转化为对象</span><br><span class="line">        info.friend.name = &#x27;jams&#x27;</span><br><span class="line">        console.log(obj.friend.name); // curry</span><br></pre></td></tr></table></figure>

<h4 id="引入lodash第三方库实现"><a href="#引入lodash第三方库实现" class="headerlink" title="引入lodash第三方库实现"></a>引入lodash第三方库实现</h4>]]></content>
  </entry>
  <entry>
    <title>我的第一个文章</title>
    <url>/2023/03/06/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E6%96%87%E7%AB%A0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>function a(){    console.log(‘hello world’)}JavaScript</p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2023/04/18/%E6%94%B9bug%E9%82%A3%E4%BA%9B%E4%BA%8B/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="watch监视ref"><a href="#watch监视ref" class="headerlink" title="watch监视ref"></a>watch监视ref</h3><p>问题描述：</p>
<p>当时在做usetitle时发现的</p>
<p><img src="/./../img/image-20230418123932584.png" alt="image-20230418123932584"></p>
<p>原因</p>
<p><img src="/./../img/image-20230418124139158.png" alt="image-20230418124139158"></p>
<p>自己写的demo</p>
<p><img src="/./../img/image-20230418124217055.png" alt="image-20230418124217055"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">&lt;h2&gt;about组件&lt;/h2&gt;</span><br><span class="line">&#123;&#123; cur &#125;&#125;</span><br><span class="line">&lt;button @click=&quot;change&quot;&gt;改变&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123;ref,watch&#125; from &#x27;vue&#x27;</span><br><span class="line">let cur = ref(&#x27;test&#x27;)</span><br><span class="line">watch(cur,(newvalue)=&gt;&#123;</span><br><span class="line">    console.log(newvalue)</span><br><span class="line">&#125;)</span><br><span class="line">function change()&#123;</span><br><span class="line">    cur.value=&#x27;你好&#x27;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">    </span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>vue进阶</title>
    <url>/2023/03/06/%E7%BB%84%E4%BB%B6%E5%8C%96%E5%BC%80%E5%8F%91/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="注册全局组件"><a href="#注册全局组件" class="headerlink" title="注册全局组件"></a>注册全局组件</h3><p><img src="/./../img/image-20230329104243860.png" alt="image-20230329104243860"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">  &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span><br><span class="line">  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">  &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">  &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">&lt;!-- 使用组件 --&gt;</span><br><span class="line">&lt;product-item&gt;&lt;/product-item&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">  &lt;template id=&quot;my-app&quot;&gt;</span><br><span class="line"></span><br><span class="line">  &lt;/template&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  &lt;template id=&quot;productItem&quot;&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;h2&gt;我是productiTEM组件&lt;/h2&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/template&gt;</span><br><span class="line"></span><br><span class="line">  &lt;script src=&quot;./js/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    const App = &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    // 开发一个productItem组件</span><br><span class="line">    let productItem = &#123;</span><br><span class="line">        template:&#x27;#productItem&#x27;,</span><br><span class="line">    &#125;</span><br><span class="line">    let app=Vue.createApp(App)</span><br><span class="line">    // 注册一个全局组件</span><br><span class="line">    app.component(&#x27;product-item&#x27;,productItem)</span><br><span class="line">    app.mount(&#x27;#app&#x27;);</span><br><span class="line">  &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<h3 id="注册局部组件"><a href="#注册局部组件" class="headerlink" title="注册局部组件"></a>注册局部组件</h3><p><img src="/./../img/image-20230329150548739.png" alt="image-20230329150548739"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">  &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span><br><span class="line">  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">  &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">  &lt;style&gt;</span><br><span class="line">    .product &#123;</span><br><span class="line">      background-color: orange;</span><br><span class="line">    &#125;</span><br><span class="line">  &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">  &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;home-nav&gt;&lt;/home-nav&gt;</span><br><span class="line"></span><br><span class="line">    &lt;product-item&gt;&lt;/product-item&gt;</span><br><span class="line">    &lt;product-item&gt;&lt;/product-item&gt;</span><br><span class="line">    &lt;product-item&gt;&lt;/product-item&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">  &lt;template id=&quot;product&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;product&quot;&gt;</span><br><span class="line">      &lt;h2&gt;&#123;&#123;title&#125;&#125;&lt;/h2&gt;</span><br><span class="line">      &lt;p&gt;商品描述, 限时折扣, 赶紧抢购&lt;/p&gt;</span><br><span class="line">      &lt;p&gt;价格: &#123;&#123;price&#125;&#125;&lt;/p&gt;</span><br><span class="line">      &lt;button&gt;收藏&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/template&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  &lt;script src=&quot;./js/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    // 1.创建app</span><br><span class="line">    const ProductItem = &#123;</span><br><span class="line">      template: &quot;#product&quot;,</span><br><span class="line">      data() &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">          title: &quot;我是product的title&quot;,</span><br><span class="line">          price: 9.9</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 1.1.组件打算在哪里被使用</span><br><span class="line">    const app = Vue.createApp(&#123;</span><br><span class="line">      // components: option api</span><br><span class="line">      components: &#123;</span><br><span class="line">        &quot;product-item&quot;:ProductItem</span><br><span class="line">      &#125;,</span><br><span class="line">      // data: option api</span><br><span class="line">      data() &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">          message: &quot;Hello Vue&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    // 2.挂载app</span><br><span class="line">    app.mount(&quot;#app&quot;)</span><br><span class="line">  &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<h3 id="组件的名称"><a href="#组件的名称" class="headerlink" title="组件的名称"></a>组件的名称</h3><p><img src="/./../img/image-20230329145607772.png" alt="image-20230329145607772"></p>
<h3 id="安装脚手架"><a href="#安装脚手架" class="headerlink" title="安装脚手架"></a>安装脚手架</h3><p>随便打开一个终端</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm i @vue/cli -g</span><br></pre></td></tr></table></figure>

<p>检测有没有安装成功</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vue --version</span><br></pre></td></tr></table></figure>

<h4 id="创建-vue-项目"><a href="#创建-vue-项目" class="headerlink" title="创建 vue 项目"></a>创建 vue 项目</h4><h5 id="利用脚手架创建"><a href="#利用脚手架创建" class="headerlink" title="利用脚手架创建"></a>利用脚手架创建</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vue create 项目名</span><br></pre></td></tr></table></figure>

<p>启动 vue 项目</p>
<p><img src="/./../img/image-20230329155843855.png" alt="image-20230329155843855"></p>
<p>启动项目</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm run serve</span><br></pre></td></tr></table></figure>

<p>启动服务</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm run build</span><br></pre></td></tr></table></figure>

<h5 id="npm-init-创建项目"><a href="#npm-init-创建项目" class="headerlink" title="npm init 创建项目"></a>npm init 创建项目</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm init vue@latest</span><br></pre></td></tr></table></figure>

<p><img src="/./../img/image-20230329223329930.png" alt="image-20230329223329930"></p>
<p>然后就可以创建了一个 vue 项目</p>
<p><img src="/./../img/image-20230329223434749.png" alt="image-20230329223434749"></p>
<p>但是这里面还没有相关依赖啊，你需要安装相关依赖</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure>

<p><img src="/./../img/image-20230329223640565.png" alt="image-20230329223640565"></p>
<blockquote>
<p>用脚手架创建的 vue 项目是用 webpack 打包的</p>
</blockquote>
<p>启动项目</p>
<p><img src="/./../img/image-20230329224015301.png" alt="image-20230329224015301"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm run dev</span><br></pre></td></tr></table></figure>

<h4 id="在脚手架中全局注册组件"><a href="#在脚手架中全局注册组件" class="headerlink" title="在脚手架中全局注册组件"></a>在脚手架中全局注册组件</h4><blockquote>
<p>全局注册在真实开发中不常用，常用的是局部注册</p>
</blockquote>
<p>在 main.js 引入这个组件，并设置为全局组件</p>
<p><img src="/./../img/image-20230329204939962.png" alt="image-20230329204939962"></p>
<p>然后在其他组件里可以全局使用这个全局组件</p>
<p><img src="/./../img/image-20230329205009958.png" alt="image-20230329205009958"></p>
<p>main.js 代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import &#123; createApp &#125; from &#x27;vue&#x27;</span><br><span class="line">import ProductItem from &#x27;./components/ProductItem.vue&#x27;</span><br><span class="line"></span><br><span class="line">import App from &#x27;./App.vue&#x27;</span><br><span class="line"></span><br><span class="line">let app = createApp(App)</span><br><span class="line"></span><br><span class="line">// 注册全局组件</span><br><span class="line">app.component(&#x27;ProductItem&#x27;,ProductItem)</span><br><span class="line">app.mount(&#x27;#app&#x27;)</span><br></pre></td></tr></table></figure>

<h3 id="给文件路径配置别名"><a href="#给文件路径配置别名" class="headerlink" title="给文件路径配置别名"></a>给文件路径配置别名</h3><p>详细见</p>
<p>从下面指示的时间开始听</p>
<p><img src="/./../img/image-20230329211812310.png" alt="image-20230329211812310"></p>
<p><img src="/./../img/image-20230329211848754.png" alt="image-20230329211848754"></p>
<p>大致代码</p>
<p><img src="/./../img/image-20230329211927065.png" alt="image-20230329211927065"></p>
<p><img src="/./../img/image-20230329212006555.png" alt="image-20230329212006555"></p>
<h2 id="组件通信"><a href="#组件通信" class="headerlink" title="组件通信"></a>组件通信</h2><h3 id="父子组件之间的通信"><a href="#父子组件之间的通信" class="headerlink" title="父子组件之间的通信"></a>父子组件之间的通信</h3><p><img src="/./../img/image-20230330191055032.png" alt="image-20230330191055032"></p>
<h4 id="父传子"><a href="#父传子" class="headerlink" title="父传子"></a>父传子</h4><h5 id="props-数组写法"><a href="#props-数组写法" class="headerlink" title="props 数组写法"></a>props 数组写法</h5><p><img src="/./../img/image-20230330192135319.png" alt="image-20230330192135319"></p>
<p>自组件用 props 接收</p>
<p><img src="/./../img/image-20230330192235635.png" alt="image-20230330192235635"></p>
<p>props 数组语法的弊端</p>
<ol>
<li><p>不能对类型进行验证</p>
</li>
<li><p>没有默认值</p>
</li>
</ol>
<h5 id="props-对象写法"><a href="#props-对象写法" class="headerlink" title="props 对象写法"></a>props 对象写法</h5><p><img src="/./../img/image-20230330193444891.png" alt="image-20230330193444891"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">props:&#123;</span><br><span class="line">        name:&#123;</span><br><span class="line">            type:String,</span><br><span class="line">            default:&#x27;我是默认值&#x27;</span><br><span class="line">        &#125;,</span><br><span class="line">        age:&#123;</span><br><span class="line">            type:Number,</span><br><span class="line">            default:21</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>type 的类型</p>
<p><img src="/./../img/image-20230330193715716.png" alt="image-20230330193715716"></p>
<p>如果是对象类型的话，必须写一个函数，函数返回一个对象</p>
<p><img src="/./../img/image-20230330193845771.png" alt="image-20230330193845771"></p>
<p>完整写法（比较好理解的写法）</p>
<p><img src="/./../img/image-20230330194025297.png" alt="image-20230330194025297"></p>
<p>如果你是数组类型也想设置一个默认值的话，也必须写函数形式</p>
<p><img src="/./../img/image-20230330194138795.png" alt="image-20230330194138795"></p>
<p><img src="/./../img/image-20230330194417330.png" alt="image-20230330194417330"></p>
<h5 id="非-prop-attribute"><a href="#非-prop-attribute" class="headerlink" title="非 prop attribute"></a>非 prop attribute</h5><p><img src="/./../img/image-20230330202851648.png" alt="image-20230330202851648"></p>
<p>如果当前属性是一个非 prop 的 attribute，那么这个属性将会添加到子组件的根属性上</p>
<p><img src="/./../img/image-20230330203338925.png" alt="image-20230330203338925"></p>
<p><img src="/./../img/image-20230330203350266.png" alt="image-20230330203350266"></p>
<p>通过$attrs 可以拿到这些非 prop 的属性</p>
<p><img src="/./../img/image-20230330203755483.png" alt="image-20230330203755483"></p>
<p><img src="/./../img/image-20230330203816023.png" alt="image-20230330203816023"></p>
<h4 id="子传父"><a href="#子传父" class="headerlink" title="子传父"></a>子传父</h4><p>$emit</p>
<p><img src="/./../img/image-20230330211238103.png" alt="image-20230330211238103"></p>
<p>本质上就是 你点击了子组件这的按钮，就会调用父组件的方法。你的父组件只是想拿到你子组件中的 count 数据而已</p>
<p>emit 验证规则</p>
<p><img src="/./../img/image-20230331101729330.png" alt="image-20230331101729330"></p>
<h3 id="非父子组件通信"><a href="#非父子组件通信" class="headerlink" title="非父子组件通信"></a>非父子组件通信</h3><h4 id="provide-和-inject"><a href="#provide-和-inject" class="headerlink" title="provide 和 inject"></a>provide 和 inject</h4><p>（理解即可 开发中用的非常少）</p>
<p><img src="/./../img/image-20230402230337532.png" alt="image-20230402230337532"></p>
<p><img src="/./../img/image-20230402230858718.png" alt="image-20230402230858718"></p>
<p><img src="/./../img/image-20230402231018070.png" alt="image-20230402231018070"></p>
<p>provie 和 inject 函数写法</p>
<p>provide 一般都写成函数的写法</p>
<p><img src="/./../img/image-20230402231257855.png" alt="image-20230402231257855"></p>
<h4 id="全局事件总线"><a href="#全局事件总线" class="headerlink" title="全局事件总线"></a>全局事件总线</h4><p><img src="/./../img/image-20230403102246753.png" alt="image-20230403102246753"></p>
<p>用 why 老师封装的库来玩这个全局事件总线</p>
<p><img src="/./../img/image-20230403103718771.png" alt="image-20230403103718771"></p>
<p>然后你需要创建一个全局事件总线对象</p>
<p><img src="/./../img/image-20230403111515057.png" alt="image-20230403111515057"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import &#123;HYEventBus&#125; from &#x27;hy-event-store&#x27;</span><br><span class="line">let eventBus = new HYEventBus()</span><br><span class="line">export default eventBus</span><br></pre></td></tr></table></figure>

<p>监听与发送</p>
<p><img src="/./../img/image-20230403111605809.png" alt="image-20230403111605809"></p>
<p><img src="/./../img/image-20230403111704810.png" alt="image-20230403111704810"></p>
<p>在某些场景中，我们的一些组件被移除的时候，那个组件的监听也应该被移除</p>
<p><img src="/./../img/image-20230403112439283.png" alt="image-20230403112439283"></p>
<h3 id="组件通信案例练习-1"><a href="#组件通信案例练习-1" class="headerlink" title="组件通信案例练习(1)"></a>组件通信案例练习(1)</h3><p>tab 栏切换</p>
<p><img src="/./../img/image-20230331102040083.png" alt="image-20230331102040083"></p>
<p>App.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">  &lt;tab-control :titles=&quot;[&#x27;衣服&#x27;,&#x27;裤子&#x27;,&#x27;鞋子&#x27;]&quot; @item-click=&quot;itemclick&quot;&gt;&lt;/tab-control&gt;</span><br><span class="line"></span><br><span class="line">  &lt;h2&gt;&#123;&#123; pageContent[currentIndex] &#125;&#125;&lt;/h2&gt;</span><br><span class="line"></span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import TabControl from &#x27;./components/TabControl.vue&#x27;;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#x27;App&#x27;,</span><br><span class="line">  data()&#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      pageContent:[&#x27;01&#x27;,&#x27;02&#x27;,&#x27;03&#x27;],</span><br><span class="line">  currentIndex:0</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line">  components: &#123;</span><br><span class="line">    TabControl,</span><br><span class="line">  &#125;,</span><br><span class="line">  methods:&#123;</span><br><span class="line">    itemclick(index)&#123;</span><br><span class="line">      this.currentIndex = index</span><br><span class="line">      console.log(index)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scpoed&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<p>tab-control.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div class=&quot;tab-control&quot;&gt;</span><br><span class="line">&lt;div v-for=&quot;(item,index) in titles&quot; class=&#x27;tab-item&#x27;</span><br><span class="line">     @click=&quot;itemClick(index)&quot;</span><br><span class="line">     :class=&quot;&#123;active:index==currentIndex&#125;&quot; :key=&quot;index&quot;&gt;&#123;&#123; item &#125;&#125;&lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    name:&#x27;TabControl&#x27;,</span><br><span class="line">    props:&#123;</span><br><span class="line">        titles:&#123;</span><br><span class="line">            type:Array,</span><br><span class="line">            default:()=&gt;[&#x27;唱&#x27;,&#x27;跳&#x27;,&#x27;rap&#x27;]</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line">    emits:[&#x27;ItemClick&#x27;],</span><br><span class="line">    data()&#123;</span><br><span class="line">        return &#123;</span><br><span class="line">currentIndex:0</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods:&#123;</span><br><span class="line">        itemClick(index)&#123;</span><br><span class="line">this.currentIndex = index</span><br><span class="line">this.$emit(&#x27;ItemClick&#x27;,this.currentIndex)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">    .tab-control &#123;</span><br><span class="line">        display: flex;</span><br><span class="line">        height: 44px;</span><br><span class="line">        line-height: 44px;</span><br><span class="line">        align-items: center;</span><br><span class="line">        justify-content: center;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    .tab-item &#123;</span><br><span class="line">        flex: 1;</span><br><span class="line">        text-align: center</span><br><span class="line">    &#125;</span><br><span class="line">    .active &#123;</span><br><span class="line">        color: red;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<h2 id="插槽"><a href="#插槽" class="headerlink" title="插槽"></a>插槽</h2><p><img src="/./../img/image-20230331132852077.png" alt="image-20230331132852077"></p>
<p>通过插槽你可以动态地插入一些元素</p>
<p><img src="/./../img/image-20230331133147936.png" alt="image-20230331133147936"></p>
<p>插槽的默认值</p>
<p><img src="/./../img/image-20230331133418324.png" alt="image-20230331133418324"></p>
<p><img src="/./../img/image-20230331133425959.png" alt="image-20230331133425959"></p>
<h3 id="具名插槽"><a href="#具名插槽" class="headerlink" title="具名插槽"></a>具名插槽</h3><p>多个插槽默认情况</p>
<p><img src="/./../img/image-20230331162830452.png" alt="image-20230331162830452"></p>
<p><img src="/./../img/image-20230331163001040.png" alt="image-20230331163001040"></p>
<h3 id="动态插槽"><a href="#动态插槽" class="headerlink" title="动态插槽"></a>动态插槽</h3><p>不常用，了解即可</p>
<p><img src="/./../img/image-20230331181911747.png" alt="image-20230331181911747"></p>
<p>自己写的小案例</p>
<p><img src="/./../img/image-20230331182418015.png" alt="image-20230331182418015"></p>
<p>Navbar 组件</p>
<p><img src="/./../img/image-20230331182441930.png" alt="image-20230331182441930"></p>
<p><img src="/./../img/image-20230331182539535.png" alt="image-20230331182539535"></p>
<p>v-slot：的语法糖</p>
<p><img src="/./../img/image-20230331223919423.png" alt="image-20230331223919423"></p>
<p><img src="/./../img/image-20230331224008917.png" alt="image-20230331224008917"></p>
<h3 id="作用域插槽"><a href="#作用域插槽" class="headerlink" title="作用域插槽"></a>作用域插槽</h3><p><img src="/./../img/image-20230402203903389.png" alt="image-20230402203903389"></p>
<p>老师的 ppt 讲的挺好的</p>
<p><img src="/./../img/image-20230402204801156.png" alt="image-20230402204801156"></p>
<h2 id="mixin"><a href="#mixin" class="headerlink" title="mixin"></a>mixin</h2><p><img src="/./../img/image-20230405115838504.png" alt="image-20230405115838504"></p>
<p>使用</p>
<p><img src="/./../img/image-20230405115859930.png" alt="image-20230405115859930"></p>
<p>会将你混入的对象与本身的进行合并</p>
<p>如果起冲突了，原来的优先级比较高</p>
<p><img src="/./../img/image-20230405120109155.png" alt="image-20230405120109155"></p>
<p>如果是生命周期的话，都会执行</p>
<p><img src="/./../img/image-20230405122559875.png" alt="image-20230405122559875"></p>
<p>全局混入</p>
<p>用的非常少</p>
<p><img src="/./../img/image-20230405122738756.png" alt="image-20230405122738756"></p>
<h2 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h2><p><img src="/./../img/image-20230403144942724.png" alt="image-20230403144942724"></p>
<p>三个比较重要的钩子</p>
<p><img src="/./../img/image-20230403145531284.png" alt="image-20230403145531284"></p>
<h2 id="refs-的使用"><a href="#refs-的使用" class="headerlink" title="$refs 的使用"></a>$refs 的使用</h2><p>基本使用</p>
<p><img src="/./../img/image-20230404102604682.png" alt="image-20230404102604682"></p>
<p>利用这个 ref，父组件可以调用子组件中的方法</p>
<p><img src="/./../img/image-20230404103642102.png" alt="image-20230404103642102"></p>
<p>你也可以用这个方式去获得某一个属性</p>
<h2 id="组件绑定-v-model"><a href="#组件绑定-v-model" class="headerlink" title="组件绑定 v-model"></a>组件绑定 v-model</h2><p><img src="/./../img/image-20230405111010784.png" alt="image-20230405111010784"></p>
<p>自己再分析一下下面这个</p>
<p><img src="/./../img/image-20230405111352830.png" alt="image-20230405111352830"></p>
<p>不懂见</p>
<p><img src="/./../img/image-20230405111146419.png" alt="image-20230405111146419"></p>
<p>自定义 v-model</p>
<p><img src="/./../img/image-20230405112703872.png" alt="image-20230405112703872"></p>
<p><img src="/./../img/image-20230405112720504.png" alt="image-20230405112720504"></p>
<p>这样我们就可以绑定多个 v-model</p>
<p><img src="/./../img/image-20230405113058912.png" alt="image-20230405113058912"></p>
<p><img src="/./../img/image-20230405113120714.png" alt="image-20230405113120714"></p>
<p>代码</p>
<p>app</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      我是&#123;&#123; name &#125;&#125;</span><br><span class="line">&lt;School v-model:name=&quot;name&quot; v-model:age=&quot;age&quot;&gt;&lt;/School&gt;</span><br><span class="line">&lt;h2&gt;年龄 &#123;&#123; age &#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">import School from &#x27;./components/School.vue&#x27;;</span><br><span class="line">export default &#123;</span><br><span class="line">    name:&#x27;App&#x27;,</span><br><span class="line">    methods:&#123;</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line">    data()&#123;</span><br><span class="line">        return &#123;</span><br><span class="line">currentIndex:0,</span><br><span class="line">tabs:[&#x27;home&#x27;,&#x27;about&#x27;,&#x27;category&#x27;],</span><br><span class="line">name:&#x27;jams&#x27;,</span><br><span class="line">age:19</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    components:&#123;</span><br><span class="line">      School</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">    .active&#123;</span><br><span class="line">      color: red;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<p>school</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">    &lt;button @click=&quot;btnclick&quot;&gt;点击我&lt;/button&gt;</span><br><span class="line">    我就是 &#123;&#123; name &#125;&#125;</span><br><span class="line"></span><br><span class="line">    &#123;&#123; age &#125;&#125;</span><br><span class="line">    &lt;button @click=&quot;changeage&quot;&gt;点我改年龄&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    name:&#x27;School&#x27;,</span><br><span class="line">    props:[&#x27;name&#x27;,&#x27;age&#x27;],</span><br><span class="line">    data()&#123;</span><br><span class="line">        return &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods:&#123;</span><br><span class="line">        btnclick()&#123;</span><br><span class="line">            this.$emit(&quot;update:name&quot;,&#x27;kobe&#x27;)</span><br><span class="line">        &#125;,</span><br><span class="line">        changeage()&#123;</span><br><span class="line">            this.$emit(&#x27;update:age&#x27;,666)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<h2 id="Composition-API"><a href="#Composition-API" class="headerlink" title="Composition API"></a>Composition API</h2><blockquote>
<p>set up 中不能使用 this！！！！因为这里的 this 不是组件实例</p>
</blockquote>
<h3 id="定义响应式数据"><a href="#定义响应式数据" class="headerlink" title="定义响应式数据"></a>定义响应式数据</h3><h4 id="reactive-api"><a href="#reactive-api" class="headerlink" title="reactive api"></a>reactive api</h4><p><img src="/./../img/image-20230411203133844.png" alt="image-20230411203133844"></p>
<p><img src="/./../img/image-20230411204143488.png" alt="image-20230411204143488"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;h1&gt;&#123;&#123; info.username &#125;&#125;&lt;/h1&gt;</span><br><span class="line">        &lt;button @click=&quot;changeinfo&quot;&gt;修改信息&lt;/button&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123;reactive&#125; from &#x27;vue&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">    name:&#x27;Aa&#x27;,</span><br><span class="line">    setup() &#123;</span><br><span class="line">        // reactive 用于处理复杂数据</span><br><span class="line">        let info=reactive(&#123;</span><br><span class="line">            username:&#x27;kobe&#x27;,</span><br><span class="line">            age:19</span><br><span class="line">        &#125;)</span><br><span class="line">        function changeinfo() &#123;</span><br><span class="line">            info.username=&#x27;jams&#x27;</span><br><span class="line">        &#125;</span><br><span class="line">        return &#123;</span><br><span class="line">            info,changeinfo</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<p>reactive 使用场景</p>
<p><img src="/./../img/image-20230411225455120.png" alt="image-20230411225455120"></p>
<p>注意事项</p>
<p>reactive 被解构后的数据将不会响应</p>
<p><img src="/./../img/image-20230412164945375.png" alt="image-20230412164945375"></p>
<p>解决方法</p>
<h4 id="Torefs-函数"><a href="#Torefs-函数" class="headerlink" title="Torefs 函数"></a>Torefs 函数</h4><p><img src="/./../img/image-20230412165321371.png" alt="image-20230412165321371"></p>
<p><img src="/./../img/image-20230412203211183.png" alt="image-20230412203211183"></p>
<h4 id="ref-api（常用）"><a href="#ref-api（常用）" class="headerlink" title="ref api（常用）"></a>ref api（常用）</h4><p><img src="/./../img/image-20230411205908691.png" alt="image-20230411205908691"></p>
<p>ref 其实也是可以处理复杂数据</p>
<p><img src="/./../img/image-20230411225319078.png" alt="image-20230411225319078"></p>
<p>ref 应用场景：除上述 reactive 的应用场景之外的其他场景，基本上都使用 ref</p>
<h4 id="单向数据流规范"><a href="#单向数据流规范" class="headerlink" title="单向数据流规范"></a>单向数据流规范</h4><ul>
<li><p>子组件拿到数据后只能使用，不能修改</p>
</li>
<li><p>如果确实要修改，那么应该将事件传递出去，由父组件修改数据</p>
</li>
</ul>
<h4 id="readonly-函数的使用"><a href="#readonly-函数的使用" class="headerlink" title="readonly 函数的使用"></a>readonly 函数的使用</h4><p>别忘了这个函数要 import 导入</p>
<p><img src="/./../img/image-20230412162923360.png" alt="image-20230412162923360"></p>
<p><img src="/./../img/image-20230412163257996.png" alt="image-20230412163257996"></p>
<p><img src="/./../img/image-20230412163341763.png" alt="image-20230412163341763"></p>
<blockquote>
<p>如果你的同事够自觉，遵守单向数据流的话，可以不用这个 readonly</p>
</blockquote>
<h3 id="computed"><a href="#computed" class="headerlink" title="computed"></a>computed</h3><p>初体验</p>
<blockquote>
<p>computed 它返回的是一个 ref</p>
</blockquote>
<p><img src="/./../img/image-20230412211005504.png" alt="image-20230412211005504"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let name = reactive(&#123;</span><br><span class="line">        firstname:&#x27;kobe&#x27;,</span><br><span class="line">        lastname:&#x27;jams&#x27;</span><br><span class="line">      &#125;)</span><br><span class="line">      // 全名</span><br><span class="line">      let fullname=computed(()=&gt;&#123;</span><br><span class="line">        return name.firstname + name.lastname</span><br><span class="line">      &#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  let score=ref(80)</span><br><span class="line">      // 评分等级</span><br><span class="line">      let scorelevel = computed(()=&gt;&#123;</span><br><span class="line">        return score.value&gt;60 ?&#x27;及格&#x27;:&#x27;不及格&#x27;</span><br><span class="line">      &#125;)</span><br></pre></td></tr></table></figure>

<p>computed 完整写法</p>
<p><img src="/./../img/image-20230412212814608.png" alt="image-20230412212814608"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">&lt;h2&gt;&#123;&#123; fullname &#125;&#125;&lt;/h2&gt;</span><br><span class="line">&lt;button @click=&quot;changename&quot;&gt;change&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123;computed,reactive,ref&#125; from &#x27;vue&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">    name:&#x27;App&#x27;,</span><br><span class="line">    setup()&#123;</span><br><span class="line">      let name = reactive(&#123;</span><br><span class="line">        firstname:&#x27;kobe&#x27;,</span><br><span class="line">        lastname:&#x27;jams&#x27;</span><br><span class="line">      &#125;)</span><br><span class="line">      // computed完整写法</span><br><span class="line">      let fullname = computed(&#123;</span><br><span class="line">        set:function(newvalue)&#123;</span><br><span class="line">          let parsename = newvalue.split(&#x27; &#x27;)</span><br><span class="line">          name.firstname = parsename[0]</span><br><span class="line">          name.lastname = parsename[1]</span><br><span class="line">        &#125;,</span><br><span class="line">        get:function()&#123;</span><br><span class="line">          return name.firstname+name.lastname</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">      function changename()&#123;</span><br><span class="line">fullname.value=&#x27;coder why&#x27;</span><br><span class="line">      &#125;</span><br><span class="line">      return &#123;</span><br><span class="line">fullname,changename</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<h3 id="watch"><a href="#watch" class="headerlink" title="watch"></a>watch</h3><p>默认开启深度监听</p>
<p>初体验</p>
<p><img src="/./../img/image-20230413161744076.png" alt="image-20230413161744076"></p>
<p>你的 newvalue 和 oldvalue 是个 proxy 对象</p>
<p><img src="/./../img/image-20230413162540188.png" alt="image-20230413162540188"></p>
<p>你要想获取普通对象的话 得这么写</p>
<p><img src="/./../img/image-20230413162612204.png" alt="image-20230413162612204"></p>
<h3 id="watcheffect"><a href="#watcheffect" class="headerlink" title="watcheffect"></a>watcheffect</h3><p><img src="/./../img/image-20230413162912965.png" alt="image-20230413162912965"></p>
<p>当依赖的数据发生变化时会执行回调</p>
<p><img src="/./../img/image-20230413164404196.png" alt="image-20230413164404196"></p>
<p><img src="/./../img/image-20230413164757551.png" alt="image-20230413164757551"></p>
<p>停止监听</p>
<p>当 counter&gt;10 的时候 停止监听</p>
<p><img src="/./../img/image-20230413165046152.png" alt="image-20230413165046152"></p>
<h3 id="生命周期钩子"><a href="#生命周期钩子" class="headerlink" title="生命周期钩子"></a>生命周期钩子</h3><p><img src="/./../img/image-20230412230210505.png" alt="image-20230412230210505"></p>
<h3 id="通过-ref-获取元素或者组件"><a href="#通过-ref-获取元素或者组件" class="headerlink" title="通过 ref 获取元素或者组件"></a>通过 ref 获取元素或者组件</h3><p><img src="/./../img/image-20230412223241373.png" alt="image-20230412223241373"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;h1 ref=&quot;title&quot;&gt;你好啊&lt;/h1&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123;ref,onMounted&#125; from &#x27;vue&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">    name:&#x27;App&#x27;,</span><br><span class="line">    setup()&#123;</span><br><span class="line">      let title=ref()</span><br><span class="line">      onMounted(()=&gt;&#123;</span><br><span class="line">        console.log(title.value)</span><br><span class="line">      &#125;)</span><br><span class="line">      return &#123;</span><br><span class="line">        title</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<p>ref 绑定组件实例</p>
<p><img src="/./../img/image-20230412224546074.png" alt="image-20230412224546074"></p>
<p>也可以调用组件实例里面的方法</p>
<p><img src="/./../img/image-20230412224807235.png" alt="image-20230412224807235"></p>
<h3 id="语法糖"><a href="#语法糖" class="headerlink" title="语法糖"></a>语法糖</h3><h4 id="初体验"><a href="#初体验" class="headerlink" title="初体验"></a>初体验</h4><p><img src="/./../img/image-20230414082026296.png" alt="image-20230414082026296"></p>
<h4 id="props-语法糖"><a href="#props-语法糖" class="headerlink" title="props 语法糖"></a>props 语法糖</h4><p>传数据还是用以前的方式传</p>
<p>接收数据用 defineProps<br><img src="/./../img/image-20230414082427531.png" alt="image-20230414082427531"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let props = defineProps(&#123;</span><br><span class="line">    name:&#123;</span><br><span class="line">        type:String,</span><br><span class="line">        default:&#x27;hfc&#x27;</span><br><span class="line">    &#125;,</span><br><span class="line">    age:&#123;</span><br><span class="line">        type:Number,</span><br><span class="line">        default:20</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="发出事件"><a href="#发出事件" class="headerlink" title="发出事件"></a>发出事件</h4><p><img src="/./../img/image-20230414083128014.png" alt="image-20230414083128014"></p>
<p>父组件监听接收就不展示了，和以前一样</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 定义emits</span><br><span class="line">let emits = defineEmits([&#x27;abc&#x27;])</span><br><span class="line">function transmitInfo()&#123;</span><br><span class="line">emits(&#x27;abc&#x27;,&#x27;我是参数&#x27;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="defineExpose"><a href="#defineExpose" class="headerlink" title="defineExpose()"></a>defineExpose()</h4><p><img src="/./../img/image-20230414083828904.png" alt="image-20230414083828904"></p>
<p>大概意思</p>
<p>你现在 about 组件里有这么一个方法</p>
<p><img src="/./../img/image-20230414084234092.png" alt="image-20230414084234092"></p>
<p>你的父组件想通过 ref.value 拿到这个组件的实例对象然后调用这个方法</p>
<p><img src="/./../img/image-20230414084347430.png" alt="image-20230414084347430"></p>
<p>你需要把这个方法在你的 about 组件暴露才行</p>
<p><img src="/./../img/image-20230414092814106.png" alt="image-20230414092814106"></p>
<p>使用</p>
<p><img src="/./../img/image-20230414092832597.png" alt="image-20230414092832597"></p>
<p>切记要在 onmounted 中使用</p>
<p>不能直接在脚本中 abc.value.foo()</p>
<p><img src="/./../img/image-20230414092944797.png" alt="image-20230414092944797"></p>
<h2 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h2><p>url 的 hash</p>
<p><img src="/./../img/image-20230415105024173.png" alt="image-20230415105024173"></p>
<p>history 模式</p>
<p><img src="/./../img/image-20230415105357670.png" alt="image-20230415105357670"></p>
<p>这两种方式都可以实现 URL 改变页面不刷新</p>
<h4 id="路由基本使用"><a href="#路由基本使用" class="headerlink" title="路由基本使用"></a>路由基本使用</h4><p>第一步：安装 vue-router</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm i vue-router</span><br></pre></td></tr></table></figure>

<p>第二步：创建一个路由的 js 文件</p>
<p>文件里的代码如下<br><img src="/./../img/image-20230415145851803.png" alt="image-20230415145851803"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import &#123; createRouter,createWebHashHistory &#125; from &quot;vue-router&quot;;</span><br><span class="line">import Home from &#x27;../components/Home.vue&#x27;</span><br><span class="line">import About from &#x27;../components/About.vue&#x27;</span><br><span class="line">// 创建一个路由,写映射关系</span><br><span class="line">const router = createRouter(&#123;</span><br><span class="line">    // 指定采用的模式</span><br><span class="line">    history:createWebHashHistory(),</span><br><span class="line">    // 映射关系</span><br><span class="line">    routes:[</span><br><span class="line">        &#123;</span><br><span class="line">            path:&#x27;/home&#x27;,</span><br><span class="line">            component:Home</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            path:&#x27;/about&#x27;,</span><br><span class="line">            component:About</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br><span class="line">// 暴露路由</span><br><span class="line">export default router</span><br></pre></td></tr></table></figure>

<p>第三步：main.js 中引入</p>
<p><img src="/./../img/image-20230415145404202.png" alt="image-20230415145404202"></p>
<p>第四步 router-view 占位</p>
<p><img src="/./../img/image-20230415150405255.png" alt="image-20230415150405255"></p>
<p>第五步：router-link 进行路由切换</p>
<p><img src="/./../img/image-20230415150945830.png" alt="image-20230415150945830"></p>
<p>小细节</p>
<p><img src="/./../img/image-20230415155803395.png" alt="image-20230415155803395"></p>
<p><img src="/./../img/image-20230415155856357.png" alt="image-20230415155856357"></p>
<h4 id="路由重定向"><a href="#路由重定向" class="headerlink" title="路由重定向"></a>路由重定向</h4><p><img src="/./../img/image-20230415151538562.png" alt="image-20230415151538562"></p>
<h4 id="路由的懒加载"><a href="#路由的懒加载" class="headerlink" title="路由的懒加载"></a>路由的懒加载</h4><p><img src="/./../img/image-20230415200830384.png" alt="image-20230415200830384"></p>
<p>使用路由懒加载之后，你打包后的代码就不会一股脑挤到同一个 js 文件里面了</p>
<p><img src="/./../img/image-20230415174302572.png" alt="image-20230415174302572"></p>
<p>webpack 魔法注释</p>
<p><img src="/./../img/image-20230415174325816.png" alt="image-20230415174325816"></p>
<p>详细见这个视频</p>
<p><img src="/./../img/image-20230415200743950.png" alt="image-20230415200743950"></p>
<h4 id="动态路由"><a href="#动态路由" class="headerlink" title="动态路由"></a>动态路由</h4><p><img src="/./../img/image-20230415201912285.png" alt="image-20230415201912285"></p>
<p>获取参数</p>
<p><img src="/./../img/image-20230415202047738.png" alt="image-20230415202047738"></p>
<p>在 script 中拿到 id</p>
<p><img src="/./../img/image-20230415202230936.png" alt="image-20230415202230936"></p>
<p>在 vue2 的 options API 中拿到这个参数用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">this.$route.params.id</span><br></pre></td></tr></table></figure>

<h4 id="路由嵌套"><a href="#路由嵌套" class="headerlink" title="路由嵌套"></a>路由嵌套</h4><p><img src="/./../img/image-20230416114121125.png" alt="image-20230416114121125"></p>
<p>第一步</p>
<p><img src="/./../img/image-20230416114225424.png" alt="image-20230416114225424"></p>
<p>第二步 第三步</p>
<p><img src="/./../img/image-20230416114259152.png" alt="image-20230416114259152"></p>
<h4 id="动态添加路由"><a href="#动态添加路由" class="headerlink" title="动态添加路由"></a>动态添加路由</h4><p><img src="/./../img/image-20230416115033154.png" alt="image-20230416115033154"></p>
<p>自己写的</p>
<p><img src="/./../img/image-20230416115736677.png" alt="image-20230416115736677"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 动态添加路由</span><br><span class="line">let admin = false</span><br><span class="line">if(admin)&#123;</span><br><span class="line">    router.addRoute(&#123;</span><br><span class="line">        path:&#x27;/admin&#x27;,</span><br><span class="line">        component:()=&gt;import(&#x27;../components/Admin.vue&#x27;)</span><br><span class="line">    &#125;)</span><br><span class="line">    // 为home组件动态添加一个子路由 第一个参数是路由的name</span><br><span class="line">    router.addRoute(&#x27;home&#x27;,&#123;</span><br><span class="line">        path:&#x27;homeAddress&#x27;,</span><br><span class="line">        component:()=&gt;import(&#x27;../components/TestOne.vue&#x27;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="删除路由（了解）"><a href="#删除路由（了解）" class="headerlink" title="删除路由（了解）"></a>删除路由（了解）</h4><p><img src="/./../img/image-20230416120057766.png" alt="image-20230416120057766"></p>
<h4 id="获取路由中所有映射对象"><a href="#获取路由中所有映射对象" class="headerlink" title="获取路由中所有映射对象"></a>获取路由中所有映射对象</h4><p><img src="/./../img/image-20230416120226401.png" alt="image-20230416120226401"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">console.log(router.getRoutes())</span><br></pre></td></tr></table></figure>

<p>打印结果</p>
<p><img src="/./../img/image-20230416120317613.png" alt="image-20230416120317613"></p>
<h4 id="Not-Found-页面的匹配与显示"><a href="#Not-Found-页面的匹配与显示" class="headerlink" title="Not Found 页面的匹配与显示"></a>Not Found 页面的匹配与显示</h4><p><img src="/./../img/image-20230415203511481.png" alt="image-20230415203511481"></p>
<p><img src="/./../img/image-20230415210136206.png" alt="image-20230415210136206"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">            path:&#x27;/:pathMatch(.*)&#x27;,</span><br><span class="line">            component:()=&gt;import(&#x27;../components/NotFound.vue&#x27;)</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<p>通过 $route.params.pathMatch 获取路径</p>
<p><img src="/./../img/image-20230415210316672.png" alt="image-20230415210316672"></p>
<p>匹配加*</p>
<p>具体什么效果自己试一试咯</p>
<p><img src="/./../img/image-20230415210443927.png" alt="image-20230415210443927"></p>
<h4 id="普通元素路由跳转"><a href="#普通元素路由跳转" class="headerlink" title="普通元素路由跳转"></a>普通元素路由跳转</h4><p><img src="/./../img/image-20230415211720227.png" alt="image-20230415211720227"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import &#123; useRouter &#125; from &#x27;vue-router&#x27;;</span><br><span class="line">let route = useRouter()</span><br><span class="line">function homeclick()&#123;</span><br><span class="line">route.push(&#x27;/home&#x27;)</span><br><span class="line">&#125;</span><br><span class="line">function aboutclick()&#123;</span><br><span class="line">  route.push(&#x27;/about&#x27;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>query 参数</p>
<p><img src="/./../img/image-20230415212031814.png" alt="image-20230415212031814"></p>
<p><img src="/./../img/image-20230415212204074.png" alt="image-20230415212204074"></p>
<p><img src="/./../img/image-20230415212216685.png" alt="image-20230415212216685"></p>
<h4 id="路由导航守卫"><a href="#路由导航守卫" class="headerlink" title="路由导航守卫"></a>路由导航守卫</h4><p><img src="/./../img/image-20230416160844583.png" alt="image-20230416160844583"></p>
<p>做一个需求，在每次跳转路由的时候，都跳到 login</p>
<p><img src="/./../img/image-20230416200050112.png" alt="image-20230416200050112"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">router.beforeEach((to,from)=&gt;&#123;</span><br><span class="line">if(to.path!==&#x27;/login&#x27;)&#123;</span><br><span class="line">    return &#x27;/login&#x27;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p><img src="/./../img/image-20230416200301478.png" alt="image-20230416200301478"></p>
<p><img src="/./../img/image-20230416200346277.png" alt="image-20230416200346277"></p>
<p>再看一个需求</p>
<p><img src="/./../img/image-20230416200544549.png" alt="image-20230416200544549"></p>
<p>路由代码</p>
<p><img src="/./../img/image-20230416202811249.png" alt="image-20230416202811249"></p>
<p>login 页面代码</p>
<p><img src="/./../img/image-20230416202837515.png" alt="image-20230416202837515"></p>
<h4 id="返回-x2F-退后-向前"><a href="#返回-x2F-退后-向前" class="headerlink" title="返回&#x2F;退后 向前"></a>返回&#x2F;退后 向前</h4><p><img src="/./../img/image-20230415212528775.png" alt="image-20230415212528775"></p>
<p>向前 forward</p>
<p><img src="/./../img/image-20230415212637806.png" alt="image-20230415212637806"></p>
<p>go</p>
<p><img src="/./../img/image-20230415212722427.png" alt="image-20230415212722427"></p>
<h4 id="导航整个流程"><a href="#导航整个流程" class="headerlink" title="导航整个流程"></a>导航整个流程</h4><p>了解，知道即可</p>
<p><img src="/./../img/image-20230416205037577.png" alt="image-20230416205037577"></p>
<p>想深究见</p>
<p><img src="/./../img/image-20230416205336781.png" alt="image-20230416205336781"></p>
<h2 id="Vuex-状态管理"><a href="#Vuex-状态管理" class="headerlink" title="Vuex 状态管理"></a>Vuex 状态管理</h2><p>状态（state）就是数据</p>
<p><img src="/./../img/image-20230416213446288.png" alt="image-20230416213446288"></p>
<p>以前我们学的都是些简单的东西，所以涉及到的数据也很简单。在真实开发中可能数据会很复杂，你就需要把一些复杂的数据放到一个地方（比如 store 仓库）里进行管理，你要用到这些数据的时候，你就从这个仓库里去拿，别的组件也是可以从这个仓库里拿数据的，这也形成了共享</p>
<p>这个 store 仓库我们可以用别人给我们写好的 vuex 或者 pinia</p>
<p><img src="/./../img/image-20230416213405629.png" alt="image-20230416213405629"></p>
<p><img src="/./../img/image-20230416213732222.png" alt="image-20230416213732222"></p>
<h4 id="vuex-初体验"><a href="#vuex-初体验" class="headerlink" title="vuex 初体验"></a>vuex 初体验</h4><p>第一步 安装</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm i vuex</span><br></pre></td></tr></table></figure>

<p><img src="/./../img/image-20230417104331031.png" alt="image-20230417104331031"></p>
<p>第二步 写 store.js</p>
<p><img src="/./../img/image-20230417124158728.png" alt="image-20230417124158728"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import &#123;createStore&#125; from &#x27;vuex&#x27;</span><br><span class="line">let store = createStore(&#123;</span><br><span class="line">    state()&#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            name:&#x27;kobe&#x27;,</span><br><span class="line">            age:20,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">export default store</span><br></pre></td></tr></table></figure>

<h5 id="第三步-使用-store-state-里面的数据"><a href="#第三步-使用-store-state-里面的数据" class="headerlink" title="第三步 使用 store.state 里面的数据"></a>第三步 使用 store.state 里面的数据</h5><p>你这样用你 store 里面的数据就比较繁琐了</p>
<p><img src="/./../img/image-20230417112555708.png" alt="image-20230417112555708"></p>
<p>我们可以通过映射到计算属性里（options API）</p>
<p><img src="/./../img/image-20230417113704544.png" alt="image-20230417113704544"></p>
<p><img src="/./../img/image-20230417113736175.png" alt="image-20230417113736175"></p>
<p>setup 中获取 store.state（composition API）</p>
<p><img src="/./../img/image-20230417122639957.png" alt="image-20230417122639957"></p>
<blockquote>
<p>是真 tmd 繁琐</p>
</blockquote>
<p>一种比较简单的方法</p>
<p><img src="/./../img/image-20230417124318293.png" alt="image-20230417124318293"></p>
<p>如果出现命名冲突 你可以起别名</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let &#123;name:cname,age:cage&#125; = toRefs(store.state)</span><br></pre></td></tr></table></figure>

<h4 id="getters"><a href="#getters" class="headerlink" title="getters"></a>getters</h4><p>相当于 computed</p>
<p><img src="/./../img/image-20230417150349096.png" alt="image-20230417150349096"></p>
<p>调用别的 getter</p>
<p><img src="/./../img/image-20230417151004476.png" alt="image-20230417151004476"></p>
<h5 id="getter-也可以返回一个函数"><a href="#getter-也可以返回一个函数" class="headerlink" title="getter 也可以返回一个函数"></a>getter 也可以返回一个函数</h5><p><img src="/./../img/image-20230417153518497.png" alt="image-20230417153518497"></p>
<h5 id="getters-的映射"><a href="#getters-的映射" class="headerlink" title="getters 的映射"></a>getters 的映射</h5><p><img src="/./../img/image-20230417154621575.png" alt="image-20230417154621575"></p>
<p>set up</p>
<p><img src="/./../img/image-20230417155101855.png" alt="image-20230417155101855"></p>
<p>你也可以使用 computed</p>
<p><img src="/./../img/image-20230417155726997.png" alt="image-20230417155726997"></p>
<p>md 我测试了一下 好像不能用响应式 算了 vuex 狗都不学</p>
<h4 id="Mutation"><a href="#Mutation" class="headerlink" title="Mutation"></a>Mutation</h4><p>在 store.js 中定义 mutation 规则</p>
<p><img src="/./../img/image-20230417164910784.png" alt="image-20230417164910784"></p>
<p>携带参数</p>
<p><img src="/./../img/image-20230417172442340.png" alt="image-20230417172442340"></p>
<h5 id="mutation-的映射"><a href="#mutation-的映射" class="headerlink" title="mutation 的映射"></a>mutation 的映射</h5><p><img src="/./../img/image-20230417222846149.png" alt="image-20230417222846149"></p>
<p>set up 映射</p>
<p>是真 tm 难用啊 还不如自己一个个写</p>
<p><img src="/./../img/image-20230417223313318.png" alt="image-20230417223313318"></p>
<h5 id="mutation-中重要原则"><a href="#mutation-中重要原则" class="headerlink" title="mutation 中重要原则"></a>mutation 中重要原则</h5><p>不要使用异步</p>
<p><img src="/./../img/image-20230417223442520.png" alt="image-20230417223442520"></p>
<p>如果非要进行异步操作（比如发送网络请求获取数据），你的这些逻辑要放在 actions 里面</p>
<h4 id="actions"><a href="#actions" class="headerlink" title="actions"></a>actions</h4><p><img src="/./../img/image-20230418174534229.png" alt="image-20230418174534229"></p>
<p>context 常用的三个东西</p>
<p><img src="/./../img/image-20230418174759644.png" alt="image-20230418174759644"></p>
<p>初体验</p>
<p><img src="/./../img/image-20230419231316378.png" alt="image-20230419231316378"></p>
<h5 id="map-映射"><a href="#map-映射" class="headerlink" title="map 映射"></a>map 映射</h5><p><img src="/./../img/image-20230419231747410.png" alt="image-20230419231747410"></p>
<p>自己写的代码如下</p>
<p>app.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &#123;&#123; $store.state.age &#125;&#125;</span><br><span class="line">        &lt;button @click=&quot;incrementAction&quot;&gt;派发&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123;mapActions&#125; from &#x27;vuex&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">    methods:&#123;</span><br><span class="line">        ...mapActions([&#x27;incrementAction&#x27;])</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<p>store.js</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import &#123; createStore &#125; from &quot;vuex&quot;;</span><br><span class="line">const store = createStore(&#123;</span><br><span class="line">    state()&#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            name:&#x27;hfc&#x27;,</span><br><span class="line">            age:19</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    getters:&#123;</span><br><span class="line">        compoundName(state)&#123;</span><br><span class="line">            return state.name+&#x27;is good&#x27;</span><br><span class="line">        &#125;,</span><br><span class="line">        newName(state,getters)&#123;</span><br><span class="line">            return state.name+getters.compoundName</span><br><span class="line">        &#125;,</span><br><span class="line">        getName(state,getters)&#123;</span><br><span class="line">            return (params)=&gt;&#123;</span><br><span class="line">console.log(state.name,getters.compoundName,params)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    mutations:&#123;</span><br><span class="line">        increment(state,params)&#123;</span><br><span class="line">            state.age++</span><br><span class="line">            console.log(params)</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    actions:&#123;</span><br><span class="line">        incrementAction(context,params)&#123;</span><br><span class="line">            context.commit(&#x27;increment&#x27;,params)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">export default store</span><br></pre></td></tr></table></figure>

<hr>
<p>在 composition api 中 用 map 映射比较麻烦，具体如下</p>
<p><img src="/./../img/image-20230419232538827.png" alt="image-20230419232538827"></p>
<blockquote>
<p>所以还是直接写吧，别 tm 映射了</p>
</blockquote>
<h5 id="发送异步请求"><a href="#发送异步请求" class="headerlink" title="发送异步请求"></a>发送异步请求</h5><p><img src="/./../img/image-20230420160133662.png" alt="image-20230420160133662"></p>
<p>更简单的写法就是 写 await</p>
<p><img src="/./../img/image-20230420161926800.png" alt="image-20230420161926800"></p>
<p>组件里 dispatch 触发这个 actions</p>
<p><img src="/./../img/image-20230420161947655.png" alt="image-20230420161947655"></p>
<h4 id="modules"><a href="#modules" class="headerlink" title="modules"></a>modules</h4><h5 id="初体验-1"><a href="#初体验-1" class="headerlink" title="初体验"></a>初体验</h5><p>创建一个 home 的模块</p>
<p><img src="/./../img/image-20230420220509234.png" alt="image-20230420220509234"></p>
<p><img src="/./../img/image-20230420220550417.png" alt="image-20230420220550417"></p>
<p>使用</p>
<p><img src="/./../img/image-20230420220810275.png" alt="image-20230420220810275"></p>
<hr>
<p><img src="/./../img/image-20230420221612166.png" alt="image-20230420221612166"></p>
<p>ok 我们接下来来玩玩模块中的 getters 吧</p>
<p><img src="/./../img/image-20230420222457657.png" alt="image-20230420222457657"></p>
<p><img src="/./../img/image-20230420222536654.png" alt="image-20230420222536654"></p>
<h5 id="命名空间"><a href="#命名空间" class="headerlink" title="命名空间"></a>命名空间</h5><p>你模块里的 mutation，action，getter 是和全局定义的 mutation，action，getter 混在一起的，这样不好，如果起同样的名字的话，你 commit 或者 dispatch 就很混乱</p>
<p><img src="/./../img/image-20230420225422778.png" alt="image-20230420225422778"></p>
<p>so……..解决方法</p>
<p><img src="/./../img/image-20230421092832227.png" alt="image-20230421092832227"></p>
<p>使用</p>
<p><img src="/./../img/image-20230421092854046.png" alt="image-20230421092854046"></p>
<h2 id="pinia"><a href="#pinia" class="headerlink" title="pinia"></a>pinia</h2><p>初体验</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm i pinia</span><br></pre></td></tr></table></figure>

<p><img src="/./../img/image-20230421100310851.png" alt="image-20230421100310851"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import &#123; createPinia &#125; from &quot;pinia&quot;;</span><br><span class="line">// 创建一个pinia</span><br><span class="line">const pinia = createPinia()</span><br><span class="line">export default pinia</span><br></pre></td></tr></table></figure>

<p>然后创建一个 store</p>
<p><img src="/./../img/image-20230421101327421.png" alt="image-20230421101327421"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import &#123; defineStore &#125; from &quot;pinia&quot;;</span><br><span class="line">let useCounter=defineStore(&#x27;counter&#x27;,&#123;</span><br><span class="line">state()&#123;</span><br><span class="line">    return &#123;</span><br><span class="line">        counter:99</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">export default useCounter</span><br></pre></td></tr></table></figure>

<p>使用 store 里面的数据</p>
<p><img src="/./../img/image-20230421101358143.png" alt="image-20230421101358143"></p>
<p>操作数据</p>
<p>pinia 不像 vuex 那么麻烦，你可以直接改，不用什么狗屁 mutation</p>
<p><img src="/./../img/image-20230421102921381.png" alt="image-20230421102921381"></p>
<p>一次性修改多个数据</p>
<p><img src="/./../img/image-20230421105544829.png" alt="image-20230421105544829"></p>
<p>注意事项</p>
<ul>
<li>store 里面的数据如果解构的话会失去响应式</li>
</ul>
<p><img src="/./../img/image-20230421102037295.png" alt="image-20230421102037295"></p>
<p>如果你既不想失去响应式也想解构，你可以使用如下方法</p>
<p><img src="/./../img/image-20230421102441755.png" alt="image-20230421102441755"></p>
<p>toRefs，storeToRefs 这两个函数你需要引入</p>
<p><img src="/./../img/image-20230421102633560.png" alt="image-20230421102633560"></p>
<h4 id="三个核心概念"><a href="#三个核心概念" class="headerlink" title="三个核心概念"></a>三个核心概念</h4><p><img src="/./../img/image-20230421101759578.png" alt="image-20230421101759578"></p>
<h4 id="state"><a href="#state" class="headerlink" title="state"></a>state</h4><h5 id="重置-state"><a href="#重置-state" class="headerlink" title="重置 state"></a>重置 state</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">counterStore.$reset()</span><br></pre></td></tr></table></figure>

<h5 id="同时修改多个值"><a href="#同时修改多个值" class="headerlink" title="同时修改多个值"></a>同时修改多个值</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">counterStore.$patch(&#123;</span><br><span class="line">    counter:2000,</span><br><span class="line">    name:&#x27;lisa&#x27;,</span><br><span class="line">    age:66</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h5 id="替换-state"><a href="#替换-state" class="headerlink" title="替换 state"></a>替换 state</h5><p>自己闲的话去玩玩，这个东西用的很少，一般不会替换</p>
<p><img src="/./../img/image-20230421111136859.png" alt="image-20230421111136859"></p>
<h4 id="getters-1"><a href="#getters-1" class="headerlink" title="getters"></a>getters</h4><h5 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h5><p><img src="/./../img/image-20230421113441719.png" alt="image-20230421113441719"></p>
<h5 id="引用其他-getter"><a href="#引用其他-getter" class="headerlink" title="引用其他 getter"></a>引用其他 getter</h5><p><img src="/./../img/image-20230421113904629.png" alt="image-20230421113904629"></p>
<p>getter 定义函数</p>
<p><img src="/./../img/image-20230421125122278.png" alt="image-20230421125122278"></p>
<p>引用其他的 store<img src="/./../img/image-20230421125718314.png" alt="image-20230421125718314"></p>
<h4 id="actions-1"><a href="#actions-1" class="headerlink" title="actions"></a>actions</h4><p>初体验</p>
<p><img src="/./../img/image-20230421145729082.png" alt="image-20230421145729082"></p>
<p>异步获取数据</p>
<p><img src="/./../img/image-20230421150153025.png" alt="image-20230421150153025"></p>
<h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><h3 id="切换组件案例"><a href="#切换组件案例" class="headerlink" title="切换组件案例"></a>切换组件案例</h3><p><img src="/./../img/image-20230404104439628.png" alt="image-20230404104439628"></p>
<p>方式：</p>
<p><img src="/./../img/image-20230404104910828.png" alt="image-20230404104910828"></p>
<p>方法一</p>
<p>核心代码</p>
<p><img src="/./../img/image-20230404133155499.png" alt="image-20230404133155499"></p>
<p>完整代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;template v-for=&quot;(item,index) in tabs&quot; :key=&quot;index&quot;&gt;</span><br><span class="line">      &lt;button @click=&quot;btnclick(index)&quot; :class=&quot;&#123;active:currentIndex===index&#125;&quot;&gt;&#123;&#123; item &#125;&#125;&lt;/button&gt;</span><br><span class="line">      &lt;/template&gt;</span><br><span class="line">        &lt;div class=&quot;view&quot;&gt;</span><br><span class="line">          &lt;template v-if=&quot;currentIndex == 0&quot;&gt;</span><br><span class="line">            &lt;Home&gt;&lt;/Home&gt;</span><br><span class="line">          &lt;/template&gt;</span><br><span class="line">          &lt;template v-else-if=&quot;currentIndex==1&quot;&gt;</span><br><span class="line">          &lt;About&gt;&lt;/About&gt;</span><br><span class="line">          &lt;/template&gt;</span><br><span class="line">          &lt;template v-else&gt;</span><br><span class="line">              &lt;Category &gt;&lt;/Category&gt;</span><br><span class="line">          &lt;/template&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">import Home from &#x27;./components/view/Home.vue&#x27;</span><br><span class="line">import About from &#x27;./components/view/About.vue&#x27;</span><br><span class="line">import Category from &#x27;./components/view/Category.vue&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">    name:&#x27;App&#x27;,</span><br><span class="line">    methods:&#123;</span><br><span class="line">      btnclick(index)&#123;</span><br><span class="line">        this.currentIndex=index</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    data()&#123;</span><br><span class="line">        return &#123;</span><br><span class="line">currentIndex:0,</span><br><span class="line">tabs:[&#x27;home&#x27;,&#x27;about&#x27;,&#x27;category&#x27;]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    components:&#123;</span><br><span class="line">      Home,About,Category</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">    .active&#123;</span><br><span class="line">      color: red;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<p>第二种方法</p>
<h4 id="动态组件"><a href="#动态组件" class="headerlink" title="动态组件"></a>动态组件</h4><p><img src="/./../img/image-20230404135637260.png" alt="image-20230404135637260"></p>
<p>动态组件传递参数和监听事件</p>
<p><img src="/./../img/image-20230404143908542.png" alt="image-20230404143908542"></p>
<p><img src="/./../img/image-20230404144409184.png" alt="image-20230404144409184"></p>
<h3 id="usetitle-的逻辑封装"><a href="#usetitle-的逻辑封装" class="headerlink" title="usetitle 的逻辑封装"></a>usetitle 的逻辑封装</h3><p><img src="/./../img/image-20230413230139198.png" alt="image-20230413230139198"></p>
<p><img src="/./../img/image-20230413230202931.png" alt="image-20230413230202931"></p>
<p>home 代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">&lt;h2&gt;我是home组件&lt;/h2&gt;</span><br><span class="line">&lt;button @click=&quot;popularClick&quot;&gt;流行&lt;/button&gt;</span><br><span class="line">&lt;button @click=&quot;hotClick&quot;&gt;热门&lt;/button&gt;</span><br><span class="line">&lt;button @click=&quot;songClick&quot;&gt;歌单&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">import useTitle from &#x27;@/hooks/useTitle&#x27;;</span><br><span class="line">export default &#123;</span><br><span class="line">    name:&#x27;Home&#x27;,</span><br><span class="line">    setup()&#123;</span><br><span class="line">        let title=useTitle(&#x27;home&#x27;)</span><br><span class="line">        function popularClick()&#123;</span><br><span class="line">            title.value=&#x27;流行&#x27;</span><br><span class="line">        &#125;</span><br><span class="line">        function hotClick()&#123;</span><br><span class="line">title.value=&#x27;热门&#x27;</span><br><span class="line">        &#125;</span><br><span class="line">        function songClick()&#123;</span><br><span class="line">title.value=&#x27;歌曲&#x27;</span><br><span class="line">        &#125;</span><br><span class="line">        return &#123;</span><br><span class="line">            useTitle,popularClick,songClick,hotClick,title</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<p>useTitle.js 代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import &#123; watch,ref &#125; from &quot;vue&quot;</span><br><span class="line"></span><br><span class="line">export default function useTitle(value)&#123;</span><br><span class="line">    let title = ref(value)</span><br><span class="line">    watch(title,(newvalue)=&gt;&#123;</span><br><span class="line">        document.title=newvalue</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        immediate:true</span><br><span class="line">    &#125;)</span><br><span class="line">    return title</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="keep-alive"><a href="#keep-alive" class="headerlink" title="keep-alive"></a>keep-alive</h2><p>就是那你切换的时候 ，你上一个组件不会被销毁，而是被 vue 缓存下来了</p>
<p><img src="/./../img/image-20230404151006202.png" alt="image-20230404151006202"></p>
<p><img src="/./../img/image-20230404151316915.png" alt="image-20230404151316915"></p>
<p><img src="/./../img/image-20230404164111169.png" alt="image-20230404164111169"></p>
<p><img src="/./../img/image-20230404164312127.png" alt="image-20230404164312127"></p>
<h2 id="webpack-分包异步导入"><a href="#webpack-分包异步导入" class="headerlink" title="webpack 分包异步导入"></a>webpack 分包异步导入</h2><p><img src="/./../img/image-20230404232906966.png" alt="image-20230404232906966"></p>
<p>具体见</p>
<p><img src="/./../img/image-20230404233332631.png" alt="image-20230404233332631"></p>
<p>对组件进行分包</p>
<p><img src="/./../img/image-20230404234029199.png" alt="image-20230404234029199"></p>
<p><img src="/./../img/image-20230404233732846.png" alt="image-20230404233732846"></p>
<p>这样之后 你 npm run build 之后，你 category 组件的逻辑就会自己打包到一个独立的文件夹</p>
<p>具体见</p>
<p><img src="/./../img/image-20230404233930067.png" alt="image-20230404233930067"> </p>
]]></content>
  </entry>
</search>
